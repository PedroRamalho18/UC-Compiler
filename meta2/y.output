Terminals unused in grammar

    IGNORE
    RESERVED


Grammar

    0 $accept: program $end

    1 program: FunctionsAndDeclarations

    2 FunctionsAndDeclarations: FunctionDefinition
    3                         | FunctionDeclaration
    4                         | Declaration
    5                         | FunctionDefinition FunctionsAndDeclarations
    6                         | FunctionDeclaration FunctionsAndDeclarations
    7                         | Declaration FunctionsAndDeclarations

    8 FunctionDefinition: TypeSpec FunctionDeclarator FunctionBody

    9 FunctionBody: LBRACE DeclarationsAndStatements RBRACE
   10             | LBRACE RBRACE

   11 DeclarationsAndStatements: Statement DeclarationsAndStatements
   12                          | Declaration DeclarationsAndStatements
   13                          | Statement
   14                          | Declaration

   15 FunctionDeclaration: TypeSpec FunctionDeclarator SEMI

   16 FunctionDeclarator: IDENTIFIER LPAR ParameterList RPAR

   17 ParameterList: ParameterDeclaration
   18              | ParameterDeclaration COMMA ParameterList

   19 ParameterDeclaration: TypeSpec IDENTIFIER
   20                     | TypeSpec

   21 Declaration: TypeSpec Declarator SEMI
   22            | TypeSpec Declarator Declarations SEMI

   23 Declarations: COMMA Declarator
   24             | Declarations COMMA Declarator

   25 TypeSpec: CHAR
   26         | INT
   27         | VOID
   28         | SHORT
   29         | DOUBLE

   30 Declarator: IDENTIFIER
   31           | IDENTIFIER ASSIGN Expr

   32 Statement: SEMI
   33          | Expr SEMI
   34          | LBRACE RBRACE
   35          | LBRACE Statements RBRACE
   36          | IF LPAR Expr RPAR Statement
   37          | IF LPAR Expr RPAR Statement ELSE Statement
   38          | WHILE LPAR Expr RPAR Statement
   39          | RETURN SEMI
   40          | RETURN Expr SEMI

   41 Statements: Statement
   42           | Statements Statement

   43 Expr: IDENTIFIER
   44     | NATURAL
   45     | CHRLIT
   46     | DECIMAL
   47     | LPAR Expr RPAR
   48     | Expr ASSIGN Expr
   49     | Expr COMMA Expr
   50     | Expr PLUS Expr
   51     | Expr MINUS Expr
   52     | Expr MUL Expr
   53     | Expr DIV Expr
   54     | Expr MOD Expr
   55     | Expr OR Expr
   56     | Expr AND Expr
   57     | Expr BITWISEOR Expr
   58     | Expr BITWISEXOR Expr
   59     | Expr BITWISEAND Expr
   60     | Expr EQ Expr
   61     | Expr NE Expr
   62     | Expr LE Expr
   63     | Expr GE Expr
   64     | Expr LT Expr
   65     | Expr GT Expr
   66     | MINUS Expr
   67     | PLUS Expr
   68     | NOT Expr
   69     | IDENTIFIER LPAR RPAR
   70     | IDENTIFIER LPAR ExprList RPAR

   71 ExprList: COMMA Expr
   72         | ExprList COMMA Expr


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    CHAR (258) 25
    DOUBLE (259) 29
    INT (260) 26
    SHORT (261) 28
    ELSE (262) 37
    WHILE (263) 38
    IF (264) 36 37
    RETURN (265) 39 40
    VOID (266) 27
    BITWISEAND (267) 59
    BITWISEOR (268) 57
    BITWISEXOR (269) 58
    AND (270) 56
    ASSIGN (271) 31 48
    MUL (272) 52
    COMMA (273) 18 23 24 49 71 72
    DIV (274) 53
    EQ (275) 60
    GE (276) 63
    GT (277) 65
    LBRACE (278) 9 10 34 35
    LE (279) 62
    LPAR (280) 16 36 37 38 47 69 70
    LT (281) 64
    MINUS (282) 51 66
    MOD (283) 54
    NE (284) 61
    NOT (285) 68
    OR (286) 55
    PLUS (287) 50 67
    RBRACE (288) 9 10 34 35
    RPAR (289) 16 36 37 38 47 69 70
    SEMI (290) 15 21 22 32 33 39 40
    IGNORE (291)
    IDENTIFIER <token> (292) 16 19 30 31 43 69 70
    NATURAL <token> (293) 44
    DECIMAL <token> (294) 46
    CHRLIT <token> (295) 45
    RESERVED <token> (296)


Nonterminals, with rules where they appear

    $accept (42)
        on left: 0
    program <node> (43)
        on left: 1
        on right: 0
    FunctionsAndDeclarations <node> (44)
        on left: 2 3 4 5 6 7
        on right: 1 5 6 7
    FunctionDefinition <node> (45)
        on left: 8
        on right: 2 5
    FunctionBody <node> (46)
        on left: 9 10
        on right: 8
    DeclarationsAndStatements <node> (47)
        on left: 11 12 13 14
        on right: 9 11 12
    FunctionDeclaration <node> (48)
        on left: 15
        on right: 3 6
    FunctionDeclarator <node> (49)
        on left: 16
        on right: 8 15
    ParameterList <node> (50)
        on left: 17 18
        on right: 16 18
    ParameterDeclaration <node> (51)
        on left: 19 20
        on right: 17 18
    Declaration <node> (52)
        on left: 21 22
        on right: 4 7 12 14
    Declarations <node> (53)
        on left: 23 24
        on right: 22 24
    TypeSpec <node> (54)
        on left: 25 26 27 28 29
        on right: 8 15 19 20 21 22
    Declarator <node> (55)
        on left: 30 31
        on right: 21 22 23 24
    Statement <node> (56)
        on left: 32 33 34 35 36 37 38 39 40
        on right: 11 13 36 37 38 41 42
    Statements <node> (57)
        on left: 41 42
        on right: 35 42
    Expr <node> (58)
        on left: 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70
        on right: 31 33 36 37 38 40 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 71 72
    ExprList <node> (59)
        on left: 71 72
        on right: 70 72


State 0

    0 $accept: • program $end
    1 program: • FunctionsAndDeclarations
    2 FunctionsAndDeclarations: • FunctionDefinition
    3                         | • FunctionDeclaration
    4                         | • Declaration
    5                         | • FunctionDefinition FunctionsAndDeclarations
    6                         | • FunctionDeclaration FunctionsAndDeclarations
    7                         | • Declaration FunctionsAndDeclarations
    8 FunctionDefinition: • TypeSpec FunctionDeclarator FunctionBody
   15 FunctionDeclaration: • TypeSpec FunctionDeclarator SEMI
   21 Declaration: • TypeSpec Declarator SEMI
   22            | • TypeSpec Declarator Declarations SEMI
   25 TypeSpec: • CHAR
   26         | • INT
   27         | • VOID
   28         | • SHORT
   29         | • DOUBLE

    CHAR    shift, and go to state 1
    DOUBLE  shift, and go to state 2
    INT     shift, and go to state 3
    SHORT   shift, and go to state 4
    VOID    shift, and go to state 5

    program                   go to state 6
    FunctionsAndDeclarations  go to state 7
    FunctionDefinition        go to state 8
    FunctionDeclaration       go to state 9
    Declaration               go to state 10
    TypeSpec                  go to state 11


State 1

   25 TypeSpec: CHAR •

    $default  reduce using rule 25 (TypeSpec)


State 2

   29 TypeSpec: DOUBLE •

    $default  reduce using rule 29 (TypeSpec)


State 3

   26 TypeSpec: INT •

    $default  reduce using rule 26 (TypeSpec)


State 4

   28 TypeSpec: SHORT •

    $default  reduce using rule 28 (TypeSpec)


State 5

   27 TypeSpec: VOID •

    $default  reduce using rule 27 (TypeSpec)


State 6

    0 $accept: program • $end

    $end  shift, and go to state 12


State 7

    1 program: FunctionsAndDeclarations •

    $default  reduce using rule 1 (program)


State 8

    2 FunctionsAndDeclarations: • FunctionDefinition
    2                         | FunctionDefinition •  [$end]
    3                         | • FunctionDeclaration
    4                         | • Declaration
    5                         | • FunctionDefinition FunctionsAndDeclarations
    5                         | FunctionDefinition • FunctionsAndDeclarations
    6                         | • FunctionDeclaration FunctionsAndDeclarations
    7                         | • Declaration FunctionsAndDeclarations
    8 FunctionDefinition: • TypeSpec FunctionDeclarator FunctionBody
   15 FunctionDeclaration: • TypeSpec FunctionDeclarator SEMI
   21 Declaration: • TypeSpec Declarator SEMI
   22            | • TypeSpec Declarator Declarations SEMI
   25 TypeSpec: • CHAR
   26         | • INT
   27         | • VOID
   28         | • SHORT
   29         | • DOUBLE

    CHAR    shift, and go to state 1
    DOUBLE  shift, and go to state 2
    INT     shift, and go to state 3
    SHORT   shift, and go to state 4
    VOID    shift, and go to state 5

    $default  reduce using rule 2 (FunctionsAndDeclarations)

    FunctionsAndDeclarations  go to state 13
    FunctionDefinition        go to state 8
    FunctionDeclaration       go to state 9
    Declaration               go to state 10
    TypeSpec                  go to state 11


State 9

    2 FunctionsAndDeclarations: • FunctionDefinition
    3                         | • FunctionDeclaration
    3                         | FunctionDeclaration •  [$end]
    4                         | • Declaration
    5                         | • FunctionDefinition FunctionsAndDeclarations
    6                         | • FunctionDeclaration FunctionsAndDeclarations
    6                         | FunctionDeclaration • FunctionsAndDeclarations
    7                         | • Declaration FunctionsAndDeclarations
    8 FunctionDefinition: • TypeSpec FunctionDeclarator FunctionBody
   15 FunctionDeclaration: • TypeSpec FunctionDeclarator SEMI
   21 Declaration: • TypeSpec Declarator SEMI
   22            | • TypeSpec Declarator Declarations SEMI
   25 TypeSpec: • CHAR
   26         | • INT
   27         | • VOID
   28         | • SHORT
   29         | • DOUBLE

    CHAR    shift, and go to state 1
    DOUBLE  shift, and go to state 2
    INT     shift, and go to state 3
    SHORT   shift, and go to state 4
    VOID    shift, and go to state 5

    $default  reduce using rule 3 (FunctionsAndDeclarations)

    FunctionsAndDeclarations  go to state 14
    FunctionDefinition        go to state 8
    FunctionDeclaration       go to state 9
    Declaration               go to state 10
    TypeSpec                  go to state 11


State 10

    2 FunctionsAndDeclarations: • FunctionDefinition
    3                         | • FunctionDeclaration
    4                         | • Declaration
    4                         | Declaration •  [$end]
    5                         | • FunctionDefinition FunctionsAndDeclarations
    6                         | • FunctionDeclaration FunctionsAndDeclarations
    7                         | • Declaration FunctionsAndDeclarations
    7                         | Declaration • FunctionsAndDeclarations
    8 FunctionDefinition: • TypeSpec FunctionDeclarator FunctionBody
   15 FunctionDeclaration: • TypeSpec FunctionDeclarator SEMI
   21 Declaration: • TypeSpec Declarator SEMI
   22            | • TypeSpec Declarator Declarations SEMI
   25 TypeSpec: • CHAR
   26         | • INT
   27         | • VOID
   28         | • SHORT
   29         | • DOUBLE

    CHAR    shift, and go to state 1
    DOUBLE  shift, and go to state 2
    INT     shift, and go to state 3
    SHORT   shift, and go to state 4
    VOID    shift, and go to state 5

    $default  reduce using rule 4 (FunctionsAndDeclarations)

    FunctionsAndDeclarations  go to state 15
    FunctionDefinition        go to state 8
    FunctionDeclaration       go to state 9
    Declaration               go to state 10
    TypeSpec                  go to state 11


State 11

    8 FunctionDefinition: TypeSpec • FunctionDeclarator FunctionBody
   15 FunctionDeclaration: TypeSpec • FunctionDeclarator SEMI
   16 FunctionDeclarator: • IDENTIFIER LPAR ParameterList RPAR
   21 Declaration: TypeSpec • Declarator SEMI
   22            | TypeSpec • Declarator Declarations SEMI
   30 Declarator: • IDENTIFIER
   31           | • IDENTIFIER ASSIGN Expr

    IDENTIFIER  shift, and go to state 16

    FunctionDeclarator  go to state 17
    Declarator          go to state 18


State 12

    0 $accept: program $end •

    $default  accept


State 13

    5 FunctionsAndDeclarations: FunctionDefinition FunctionsAndDeclarations •

    $default  reduce using rule 5 (FunctionsAndDeclarations)


State 14

    6 FunctionsAndDeclarations: FunctionDeclaration FunctionsAndDeclarations •

    $default  reduce using rule 6 (FunctionsAndDeclarations)


State 15

    7 FunctionsAndDeclarations: Declaration FunctionsAndDeclarations •

    $default  reduce using rule 7 (FunctionsAndDeclarations)


State 16

   16 FunctionDeclarator: IDENTIFIER • LPAR ParameterList RPAR
   30 Declarator: IDENTIFIER •  [COMMA, SEMI]
   31           | IDENTIFIER • ASSIGN Expr

    ASSIGN  shift, and go to state 19
    LPAR    shift, and go to state 20

    $default  reduce using rule 30 (Declarator)


State 17

    8 FunctionDefinition: TypeSpec FunctionDeclarator • FunctionBody
    9 FunctionBody: • LBRACE DeclarationsAndStatements RBRACE
   10             | • LBRACE RBRACE
   15 FunctionDeclaration: TypeSpec FunctionDeclarator • SEMI

    LBRACE  shift, and go to state 21
    SEMI    shift, and go to state 22

    FunctionBody  go to state 23


State 18

   21 Declaration: TypeSpec Declarator • SEMI
   22            | TypeSpec Declarator • Declarations SEMI
   23 Declarations: • COMMA Declarator
   24             | • Declarations COMMA Declarator

    COMMA  shift, and go to state 24
    SEMI   shift, and go to state 25

    Declarations  go to state 26


State 19

   31 Declarator: IDENTIFIER ASSIGN • Expr
   43 Expr: • IDENTIFIER
   44     | • NATURAL
   45     | • CHRLIT
   46     | • DECIMAL
   47     | • LPAR Expr RPAR
   48     | • Expr ASSIGN Expr
   49     | • Expr COMMA Expr
   50     | • Expr PLUS Expr
   51     | • Expr MINUS Expr
   52     | • Expr MUL Expr
   53     | • Expr DIV Expr
   54     | • Expr MOD Expr
   55     | • Expr OR Expr
   56     | • Expr AND Expr
   57     | • Expr BITWISEOR Expr
   58     | • Expr BITWISEXOR Expr
   59     | • Expr BITWISEAND Expr
   60     | • Expr EQ Expr
   61     | • Expr NE Expr
   62     | • Expr LE Expr
   63     | • Expr GE Expr
   64     | • Expr LT Expr
   65     | • Expr GT Expr
   66     | • MINUS Expr
   67     | • PLUS Expr
   68     | • NOT Expr
   69     | • IDENTIFIER LPAR RPAR
   70     | • IDENTIFIER LPAR ExprList RPAR

    LPAR        shift, and go to state 27
    MINUS       shift, and go to state 28
    NOT         shift, and go to state 29
    PLUS        shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    NATURAL     shift, and go to state 32
    DECIMAL     shift, and go to state 33
    CHRLIT      shift, and go to state 34

    Expr  go to state 35


State 20

   16 FunctionDeclarator: IDENTIFIER LPAR • ParameterList RPAR
   17 ParameterList: • ParameterDeclaration
   18              | • ParameterDeclaration COMMA ParameterList
   19 ParameterDeclaration: • TypeSpec IDENTIFIER
   20                     | • TypeSpec
   25 TypeSpec: • CHAR
   26         | • INT
   27         | • VOID
   28         | • SHORT
   29         | • DOUBLE

    CHAR    shift, and go to state 1
    DOUBLE  shift, and go to state 2
    INT     shift, and go to state 3
    SHORT   shift, and go to state 4
    VOID    shift, and go to state 5

    ParameterList         go to state 36
    ParameterDeclaration  go to state 37
    TypeSpec              go to state 38


State 21

    9 FunctionBody: LBRACE • DeclarationsAndStatements RBRACE
   10             | LBRACE • RBRACE
   11 DeclarationsAndStatements: • Statement DeclarationsAndStatements
   12                          | • Declaration DeclarationsAndStatements
   13                          | • Statement
   14                          | • Declaration
   21 Declaration: • TypeSpec Declarator SEMI
   22            | • TypeSpec Declarator Declarations SEMI
   25 TypeSpec: • CHAR
   26         | • INT
   27         | • VOID
   28         | • SHORT
   29         | • DOUBLE
   32 Statement: • SEMI
   33          | • Expr SEMI
   34          | • LBRACE RBRACE
   35          | • LBRACE Statements RBRACE
   36          | • IF LPAR Expr RPAR Statement
   37          | • IF LPAR Expr RPAR Statement ELSE Statement
   38          | • WHILE LPAR Expr RPAR Statement
   39          | • RETURN SEMI
   40          | • RETURN Expr SEMI
   43 Expr: • IDENTIFIER
   44     | • NATURAL
   45     | • CHRLIT
   46     | • DECIMAL
   47     | • LPAR Expr RPAR
   48     | • Expr ASSIGN Expr
   49     | • Expr COMMA Expr
   50     | • Expr PLUS Expr
   51     | • Expr MINUS Expr
   52     | • Expr MUL Expr
   53     | • Expr DIV Expr
   54     | • Expr MOD Expr
   55     | • Expr OR Expr
   56     | • Expr AND Expr
   57     | • Expr BITWISEOR Expr
   58     | • Expr BITWISEXOR Expr
   59     | • Expr BITWISEAND Expr
   60     | • Expr EQ Expr
   61     | • Expr NE Expr
   62     | • Expr LE Expr
   63     | • Expr GE Expr
   64     | • Expr LT Expr
   65     | • Expr GT Expr
   66     | • MINUS Expr
   67     | • PLUS Expr
   68     | • NOT Expr
   69     | • IDENTIFIER LPAR RPAR
   70     | • IDENTIFIER LPAR ExprList RPAR

    CHAR        shift, and go to state 1
    DOUBLE      shift, and go to state 2
    INT         shift, and go to state 3
    SHORT       shift, and go to state 4
    WHILE       shift, and go to state 39
    IF          shift, and go to state 40
    RETURN      shift, and go to state 41
    VOID        shift, and go to state 5
    LBRACE      shift, and go to state 42
    LPAR        shift, and go to state 27
    MINUS       shift, and go to state 28
    NOT         shift, and go to state 29
    PLUS        shift, and go to state 30
    RBRACE      shift, and go to state 43
    SEMI        shift, and go to state 44
    IDENTIFIER  shift, and go to state 31
    NATURAL     shift, and go to state 32
    DECIMAL     shift, and go to state 33
    CHRLIT      shift, and go to state 34

    DeclarationsAndStatements  go to state 45
    Declaration                go to state 46
    TypeSpec                   go to state 47
    Statement                  go to state 48
    Expr                       go to state 49


State 22

   15 FunctionDeclaration: TypeSpec FunctionDeclarator SEMI •

    $default  reduce using rule 15 (FunctionDeclaration)


State 23

    8 FunctionDefinition: TypeSpec FunctionDeclarator FunctionBody •

    $default  reduce using rule 8 (FunctionDefinition)


State 24

   23 Declarations: COMMA • Declarator
   30 Declarator: • IDENTIFIER
   31           | • IDENTIFIER ASSIGN Expr

    IDENTIFIER  shift, and go to state 50

    Declarator  go to state 51


State 25

   21 Declaration: TypeSpec Declarator SEMI •

    $default  reduce using rule 21 (Declaration)


State 26

   22 Declaration: TypeSpec Declarator Declarations • SEMI
   24 Declarations: Declarations • COMMA Declarator

    COMMA  shift, and go to state 52
    SEMI   shift, and go to state 53


State 27

   43 Expr: • IDENTIFIER
   44     | • NATURAL
   45     | • CHRLIT
   46     | • DECIMAL
   47     | • LPAR Expr RPAR
   47     | LPAR • Expr RPAR
   48     | • Expr ASSIGN Expr
   49     | • Expr COMMA Expr
   50     | • Expr PLUS Expr
   51     | • Expr MINUS Expr
   52     | • Expr MUL Expr
   53     | • Expr DIV Expr
   54     | • Expr MOD Expr
   55     | • Expr OR Expr
   56     | • Expr AND Expr
   57     | • Expr BITWISEOR Expr
   58     | • Expr BITWISEXOR Expr
   59     | • Expr BITWISEAND Expr
   60     | • Expr EQ Expr
   61     | • Expr NE Expr
   62     | • Expr LE Expr
   63     | • Expr GE Expr
   64     | • Expr LT Expr
   65     | • Expr GT Expr
   66     | • MINUS Expr
   67     | • PLUS Expr
   68     | • NOT Expr
   69     | • IDENTIFIER LPAR RPAR
   70     | • IDENTIFIER LPAR ExprList RPAR

    LPAR        shift, and go to state 27
    MINUS       shift, and go to state 28
    NOT         shift, and go to state 29
    PLUS        shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    NATURAL     shift, and go to state 32
    DECIMAL     shift, and go to state 33
    CHRLIT      shift, and go to state 34

    Expr  go to state 54


State 28

   43 Expr: • IDENTIFIER
   44     | • NATURAL
   45     | • CHRLIT
   46     | • DECIMAL
   47     | • LPAR Expr RPAR
   48     | • Expr ASSIGN Expr
   49     | • Expr COMMA Expr
   50     | • Expr PLUS Expr
   51     | • Expr MINUS Expr
   52     | • Expr MUL Expr
   53     | • Expr DIV Expr
   54     | • Expr MOD Expr
   55     | • Expr OR Expr
   56     | • Expr AND Expr
   57     | • Expr BITWISEOR Expr
   58     | • Expr BITWISEXOR Expr
   59     | • Expr BITWISEAND Expr
   60     | • Expr EQ Expr
   61     | • Expr NE Expr
   62     | • Expr LE Expr
   63     | • Expr GE Expr
   64     | • Expr LT Expr
   65     | • Expr GT Expr
   66     | • MINUS Expr
   66     | MINUS • Expr
   67     | • PLUS Expr
   68     | • NOT Expr
   69     | • IDENTIFIER LPAR RPAR
   70     | • IDENTIFIER LPAR ExprList RPAR

    LPAR        shift, and go to state 27
    MINUS       shift, and go to state 28
    NOT         shift, and go to state 29
    PLUS        shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    NATURAL     shift, and go to state 32
    DECIMAL     shift, and go to state 33
    CHRLIT      shift, and go to state 34

    Expr  go to state 55


State 29

   43 Expr: • IDENTIFIER
   44     | • NATURAL
   45     | • CHRLIT
   46     | • DECIMAL
   47     | • LPAR Expr RPAR
   48     | • Expr ASSIGN Expr
   49     | • Expr COMMA Expr
   50     | • Expr PLUS Expr
   51     | • Expr MINUS Expr
   52     | • Expr MUL Expr
   53     | • Expr DIV Expr
   54     | • Expr MOD Expr
   55     | • Expr OR Expr
   56     | • Expr AND Expr
   57     | • Expr BITWISEOR Expr
   58     | • Expr BITWISEXOR Expr
   59     | • Expr BITWISEAND Expr
   60     | • Expr EQ Expr
   61     | • Expr NE Expr
   62     | • Expr LE Expr
   63     | • Expr GE Expr
   64     | • Expr LT Expr
   65     | • Expr GT Expr
   66     | • MINUS Expr
   67     | • PLUS Expr
   68     | • NOT Expr
   68     | NOT • Expr
   69     | • IDENTIFIER LPAR RPAR
   70     | • IDENTIFIER LPAR ExprList RPAR

    LPAR        shift, and go to state 27
    MINUS       shift, and go to state 28
    NOT         shift, and go to state 29
    PLUS        shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    NATURAL     shift, and go to state 32
    DECIMAL     shift, and go to state 33
    CHRLIT      shift, and go to state 34

    Expr  go to state 56


State 30

   43 Expr: • IDENTIFIER
   44     | • NATURAL
   45     | • CHRLIT
   46     | • DECIMAL
   47     | • LPAR Expr RPAR
   48     | • Expr ASSIGN Expr
   49     | • Expr COMMA Expr
   50     | • Expr PLUS Expr
   51     | • Expr MINUS Expr
   52     | • Expr MUL Expr
   53     | • Expr DIV Expr
   54     | • Expr MOD Expr
   55     | • Expr OR Expr
   56     | • Expr AND Expr
   57     | • Expr BITWISEOR Expr
   58     | • Expr BITWISEXOR Expr
   59     | • Expr BITWISEAND Expr
   60     | • Expr EQ Expr
   61     | • Expr NE Expr
   62     | • Expr LE Expr
   63     | • Expr GE Expr
   64     | • Expr LT Expr
   65     | • Expr GT Expr
   66     | • MINUS Expr
   67     | • PLUS Expr
   67     | PLUS • Expr
   68     | • NOT Expr
   69     | • IDENTIFIER LPAR RPAR
   70     | • IDENTIFIER LPAR ExprList RPAR

    LPAR        shift, and go to state 27
    MINUS       shift, and go to state 28
    NOT         shift, and go to state 29
    PLUS        shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    NATURAL     shift, and go to state 32
    DECIMAL     shift, and go to state 33
    CHRLIT      shift, and go to state 34

    Expr  go to state 57


State 31

   43 Expr: IDENTIFIER •  [BITWISEAND, BITWISEOR, BITWISEXOR, AND, ASSIGN, MUL, COMMA, DIV, EQ, GE, GT, LE, LT, MINUS, MOD, NE, OR, PLUS, RPAR, SEMI]
   69     | IDENTIFIER • LPAR RPAR
   70     | IDENTIFIER • LPAR ExprList RPAR

    LPAR  shift, and go to state 58

    $default  reduce using rule 43 (Expr)


State 32

   44 Expr: NATURAL •

    $default  reduce using rule 44 (Expr)


State 33

   46 Expr: DECIMAL •

    $default  reduce using rule 46 (Expr)


State 34

   45 Expr: CHRLIT •

    $default  reduce using rule 45 (Expr)


State 35

   31 Declarator: IDENTIFIER ASSIGN Expr •  [COMMA, SEMI]
   48 Expr: Expr • ASSIGN Expr
   49     | Expr • COMMA Expr
   50     | Expr • PLUS Expr
   51     | Expr • MINUS Expr
   52     | Expr • MUL Expr
   53     | Expr • DIV Expr
   54     | Expr • MOD Expr
   55     | Expr • OR Expr
   56     | Expr • AND Expr
   57     | Expr • BITWISEOR Expr
   58     | Expr • BITWISEXOR Expr
   59     | Expr • BITWISEAND Expr
   60     | Expr • EQ Expr
   61     | Expr • NE Expr
   62     | Expr • LE Expr
   63     | Expr • GE Expr
   64     | Expr • LT Expr
   65     | Expr • GT Expr

    BITWISEAND  shift, and go to state 59
    BITWISEOR   shift, and go to state 60
    BITWISEXOR  shift, and go to state 61
    AND         shift, and go to state 62
    ASSIGN      shift, and go to state 63
    MUL         shift, and go to state 64
    DIV         shift, and go to state 66
    EQ          shift, and go to state 67
    GE          shift, and go to state 68
    GT          shift, and go to state 69
    LE          shift, and go to state 70
    LT          shift, and go to state 71
    MINUS       shift, and go to state 72
    MOD         shift, and go to state 73
    NE          shift, and go to state 74
    OR          shift, and go to state 75
    PLUS        shift, and go to state 76

    $default  reduce using rule 31 (Declarator)

    Conflict between rule 31 and token COMMA resolved as reduce (COMMA < ASSIGN).


State 36

   16 FunctionDeclarator: IDENTIFIER LPAR ParameterList • RPAR

    RPAR  shift, and go to state 77


State 37

   17 ParameterList: ParameterDeclaration •  [RPAR]
   18              | ParameterDeclaration • COMMA ParameterList

    COMMA  shift, and go to state 78

    $default  reduce using rule 17 (ParameterList)


State 38

   19 ParameterDeclaration: TypeSpec • IDENTIFIER
   20                     | TypeSpec •  [COMMA, RPAR]

    IDENTIFIER  shift, and go to state 79

    $default  reduce using rule 20 (ParameterDeclaration)


State 39

   38 Statement: WHILE • LPAR Expr RPAR Statement

    LPAR  shift, and go to state 80


State 40

   36 Statement: IF • LPAR Expr RPAR Statement
   37          | IF • LPAR Expr RPAR Statement ELSE Statement

    LPAR  shift, and go to state 81


State 41

   39 Statement: RETURN • SEMI
   40          | RETURN • Expr SEMI
   43 Expr: • IDENTIFIER
   44     | • NATURAL
   45     | • CHRLIT
   46     | • DECIMAL
   47     | • LPAR Expr RPAR
   48     | • Expr ASSIGN Expr
   49     | • Expr COMMA Expr
   50     | • Expr PLUS Expr
   51     | • Expr MINUS Expr
   52     | • Expr MUL Expr
   53     | • Expr DIV Expr
   54     | • Expr MOD Expr
   55     | • Expr OR Expr
   56     | • Expr AND Expr
   57     | • Expr BITWISEOR Expr
   58     | • Expr BITWISEXOR Expr
   59     | • Expr BITWISEAND Expr
   60     | • Expr EQ Expr
   61     | • Expr NE Expr
   62     | • Expr LE Expr
   63     | • Expr GE Expr
   64     | • Expr LT Expr
   65     | • Expr GT Expr
   66     | • MINUS Expr
   67     | • PLUS Expr
   68     | • NOT Expr
   69     | • IDENTIFIER LPAR RPAR
   70     | • IDENTIFIER LPAR ExprList RPAR

    LPAR        shift, and go to state 27
    MINUS       shift, and go to state 28
    NOT         shift, and go to state 29
    PLUS        shift, and go to state 30
    SEMI        shift, and go to state 82
    IDENTIFIER  shift, and go to state 31
    NATURAL     shift, and go to state 32
    DECIMAL     shift, and go to state 33
    CHRLIT      shift, and go to state 34

    Expr  go to state 83


State 42

   32 Statement: • SEMI
   33          | • Expr SEMI
   34          | • LBRACE RBRACE
   34          | LBRACE • RBRACE
   35          | • LBRACE Statements RBRACE
   35          | LBRACE • Statements RBRACE
   36          | • IF LPAR Expr RPAR Statement
   37          | • IF LPAR Expr RPAR Statement ELSE Statement
   38          | • WHILE LPAR Expr RPAR Statement
   39          | • RETURN SEMI
   40          | • RETURN Expr SEMI
   41 Statements: • Statement
   42           | • Statements Statement
   43 Expr: • IDENTIFIER
   44     | • NATURAL
   45     | • CHRLIT
   46     | • DECIMAL
   47     | • LPAR Expr RPAR
   48     | • Expr ASSIGN Expr
   49     | • Expr COMMA Expr
   50     | • Expr PLUS Expr
   51     | • Expr MINUS Expr
   52     | • Expr MUL Expr
   53     | • Expr DIV Expr
   54     | • Expr MOD Expr
   55     | • Expr OR Expr
   56     | • Expr AND Expr
   57     | • Expr BITWISEOR Expr
   58     | • Expr BITWISEXOR Expr
   59     | • Expr BITWISEAND Expr
   60     | • Expr EQ Expr
   61     | • Expr NE Expr
   62     | • Expr LE Expr
   63     | • Expr GE Expr
   64     | • Expr LT Expr
   65     | • Expr GT Expr
   66     | • MINUS Expr
   67     | • PLUS Expr
   68     | • NOT Expr
   69     | • IDENTIFIER LPAR RPAR
   70     | • IDENTIFIER LPAR ExprList RPAR

    WHILE       shift, and go to state 39
    IF          shift, and go to state 40
    RETURN      shift, and go to state 41
    LBRACE      shift, and go to state 42
    LPAR        shift, and go to state 27
    MINUS       shift, and go to state 28
    NOT         shift, and go to state 29
    PLUS        shift, and go to state 30
    RBRACE      shift, and go to state 84
    SEMI        shift, and go to state 44
    IDENTIFIER  shift, and go to state 31
    NATURAL     shift, and go to state 32
    DECIMAL     shift, and go to state 33
    CHRLIT      shift, and go to state 34

    Statement   go to state 85
    Statements  go to state 86
    Expr        go to state 49


State 43

   10 FunctionBody: LBRACE RBRACE •

    $default  reduce using rule 10 (FunctionBody)


State 44

   32 Statement: SEMI •

    $default  reduce using rule 32 (Statement)


State 45

    9 FunctionBody: LBRACE DeclarationsAndStatements • RBRACE

    RBRACE  shift, and go to state 87


State 46

   11 DeclarationsAndStatements: • Statement DeclarationsAndStatements
   12                          | • Declaration DeclarationsAndStatements
   12                          | Declaration • DeclarationsAndStatements
   13                          | • Statement
   14                          | • Declaration
   14                          | Declaration •  [RBRACE]
   21 Declaration: • TypeSpec Declarator SEMI
   22            | • TypeSpec Declarator Declarations SEMI
   25 TypeSpec: • CHAR
   26         | • INT
   27         | • VOID
   28         | • SHORT
   29         | • DOUBLE
   32 Statement: • SEMI
   33          | • Expr SEMI
   34          | • LBRACE RBRACE
   35          | • LBRACE Statements RBRACE
   36          | • IF LPAR Expr RPAR Statement
   37          | • IF LPAR Expr RPAR Statement ELSE Statement
   38          | • WHILE LPAR Expr RPAR Statement
   39          | • RETURN SEMI
   40          | • RETURN Expr SEMI
   43 Expr: • IDENTIFIER
   44     | • NATURAL
   45     | • CHRLIT
   46     | • DECIMAL
   47     | • LPAR Expr RPAR
   48     | • Expr ASSIGN Expr
   49     | • Expr COMMA Expr
   50     | • Expr PLUS Expr
   51     | • Expr MINUS Expr
   52     | • Expr MUL Expr
   53     | • Expr DIV Expr
   54     | • Expr MOD Expr
   55     | • Expr OR Expr
   56     | • Expr AND Expr
   57     | • Expr BITWISEOR Expr
   58     | • Expr BITWISEXOR Expr
   59     | • Expr BITWISEAND Expr
   60     | • Expr EQ Expr
   61     | • Expr NE Expr
   62     | • Expr LE Expr
   63     | • Expr GE Expr
   64     | • Expr LT Expr
   65     | • Expr GT Expr
   66     | • MINUS Expr
   67     | • PLUS Expr
   68     | • NOT Expr
   69     | • IDENTIFIER LPAR RPAR
   70     | • IDENTIFIER LPAR ExprList RPAR

    CHAR        shift, and go to state 1
    DOUBLE      shift, and go to state 2
    INT         shift, and go to state 3
    SHORT       shift, and go to state 4
    WHILE       shift, and go to state 39
    IF          shift, and go to state 40
    RETURN      shift, and go to state 41
    VOID        shift, and go to state 5
    LBRACE      shift, and go to state 42
    LPAR        shift, and go to state 27
    MINUS       shift, and go to state 28
    NOT         shift, and go to state 29
    PLUS        shift, and go to state 30
    SEMI        shift, and go to state 44
    IDENTIFIER  shift, and go to state 31
    NATURAL     shift, and go to state 32
    DECIMAL     shift, and go to state 33
    CHRLIT      shift, and go to state 34

    $default  reduce using rule 14 (DeclarationsAndStatements)

    DeclarationsAndStatements  go to state 88
    Declaration                go to state 46
    TypeSpec                   go to state 47
    Statement                  go to state 48
    Expr                       go to state 49


State 47

   21 Declaration: TypeSpec • Declarator SEMI
   22            | TypeSpec • Declarator Declarations SEMI
   30 Declarator: • IDENTIFIER
   31           | • IDENTIFIER ASSIGN Expr

    IDENTIFIER  shift, and go to state 50

    Declarator  go to state 18


State 48

   11 DeclarationsAndStatements: • Statement DeclarationsAndStatements
   11                          | Statement • DeclarationsAndStatements
   12                          | • Declaration DeclarationsAndStatements
   13                          | • Statement
   13                          | Statement •  [RBRACE]
   14                          | • Declaration
   21 Declaration: • TypeSpec Declarator SEMI
   22            | • TypeSpec Declarator Declarations SEMI
   25 TypeSpec: • CHAR
   26         | • INT
   27         | • VOID
   28         | • SHORT
   29         | • DOUBLE
   32 Statement: • SEMI
   33          | • Expr SEMI
   34          | • LBRACE RBRACE
   35          | • LBRACE Statements RBRACE
   36          | • IF LPAR Expr RPAR Statement
   37          | • IF LPAR Expr RPAR Statement ELSE Statement
   38          | • WHILE LPAR Expr RPAR Statement
   39          | • RETURN SEMI
   40          | • RETURN Expr SEMI
   43 Expr: • IDENTIFIER
   44     | • NATURAL
   45     | • CHRLIT
   46     | • DECIMAL
   47     | • LPAR Expr RPAR
   48     | • Expr ASSIGN Expr
   49     | • Expr COMMA Expr
   50     | • Expr PLUS Expr
   51     | • Expr MINUS Expr
   52     | • Expr MUL Expr
   53     | • Expr DIV Expr
   54     | • Expr MOD Expr
   55     | • Expr OR Expr
   56     | • Expr AND Expr
   57     | • Expr BITWISEOR Expr
   58     | • Expr BITWISEXOR Expr
   59     | • Expr BITWISEAND Expr
   60     | • Expr EQ Expr
   61     | • Expr NE Expr
   62     | • Expr LE Expr
   63     | • Expr GE Expr
   64     | • Expr LT Expr
   65     | • Expr GT Expr
   66     | • MINUS Expr
   67     | • PLUS Expr
   68     | • NOT Expr
   69     | • IDENTIFIER LPAR RPAR
   70     | • IDENTIFIER LPAR ExprList RPAR

    CHAR        shift, and go to state 1
    DOUBLE      shift, and go to state 2
    INT         shift, and go to state 3
    SHORT       shift, and go to state 4
    WHILE       shift, and go to state 39
    IF          shift, and go to state 40
    RETURN      shift, and go to state 41
    VOID        shift, and go to state 5
    LBRACE      shift, and go to state 42
    LPAR        shift, and go to state 27
    MINUS       shift, and go to state 28
    NOT         shift, and go to state 29
    PLUS        shift, and go to state 30
    SEMI        shift, and go to state 44
    IDENTIFIER  shift, and go to state 31
    NATURAL     shift, and go to state 32
    DECIMAL     shift, and go to state 33
    CHRLIT      shift, and go to state 34

    $default  reduce using rule 13 (DeclarationsAndStatements)

    DeclarationsAndStatements  go to state 89
    Declaration                go to state 46
    TypeSpec                   go to state 47
    Statement                  go to state 48
    Expr                       go to state 49


State 49

   33 Statement: Expr • SEMI
   48 Expr: Expr • ASSIGN Expr
   49     | Expr • COMMA Expr
   50     | Expr • PLUS Expr
   51     | Expr • MINUS Expr
   52     | Expr • MUL Expr
   53     | Expr • DIV Expr
   54     | Expr • MOD Expr
   55     | Expr • OR Expr
   56     | Expr • AND Expr
   57     | Expr • BITWISEOR Expr
   58     | Expr • BITWISEXOR Expr
   59     | Expr • BITWISEAND Expr
   60     | Expr • EQ Expr
   61     | Expr • NE Expr
   62     | Expr • LE Expr
   63     | Expr • GE Expr
   64     | Expr • LT Expr
   65     | Expr • GT Expr

    BITWISEAND  shift, and go to state 59
    BITWISEOR   shift, and go to state 60
    BITWISEXOR  shift, and go to state 61
    AND         shift, and go to state 62
    ASSIGN      shift, and go to state 63
    MUL         shift, and go to state 64
    COMMA       shift, and go to state 65
    DIV         shift, and go to state 66
    EQ          shift, and go to state 67
    GE          shift, and go to state 68
    GT          shift, and go to state 69
    LE          shift, and go to state 70
    LT          shift, and go to state 71
    MINUS       shift, and go to state 72
    MOD         shift, and go to state 73
    NE          shift, and go to state 74
    OR          shift, and go to state 75
    PLUS        shift, and go to state 76
    SEMI        shift, and go to state 90


State 50

   30 Declarator: IDENTIFIER •  [COMMA, SEMI]
   31           | IDENTIFIER • ASSIGN Expr

    ASSIGN  shift, and go to state 19

    $default  reduce using rule 30 (Declarator)


State 51

   23 Declarations: COMMA Declarator •

    $default  reduce using rule 23 (Declarations)


State 52

   24 Declarations: Declarations COMMA • Declarator
   30 Declarator: • IDENTIFIER
   31           | • IDENTIFIER ASSIGN Expr

    IDENTIFIER  shift, and go to state 50

    Declarator  go to state 91


State 53

   22 Declaration: TypeSpec Declarator Declarations SEMI •

    $default  reduce using rule 22 (Declaration)


State 54

   47 Expr: LPAR Expr • RPAR
   48     | Expr • ASSIGN Expr
   49     | Expr • COMMA Expr
   50     | Expr • PLUS Expr
   51     | Expr • MINUS Expr
   52     | Expr • MUL Expr
   53     | Expr • DIV Expr
   54     | Expr • MOD Expr
   55     | Expr • OR Expr
   56     | Expr • AND Expr
   57     | Expr • BITWISEOR Expr
   58     | Expr • BITWISEXOR Expr
   59     | Expr • BITWISEAND Expr
   60     | Expr • EQ Expr
   61     | Expr • NE Expr
   62     | Expr • LE Expr
   63     | Expr • GE Expr
   64     | Expr • LT Expr
   65     | Expr • GT Expr

    BITWISEAND  shift, and go to state 59
    BITWISEOR   shift, and go to state 60
    BITWISEXOR  shift, and go to state 61
    AND         shift, and go to state 62
    ASSIGN      shift, and go to state 63
    MUL         shift, and go to state 64
    COMMA       shift, and go to state 65
    DIV         shift, and go to state 66
    EQ          shift, and go to state 67
    GE          shift, and go to state 68
    GT          shift, and go to state 69
    LE          shift, and go to state 70
    LT          shift, and go to state 71
    MINUS       shift, and go to state 72
    MOD         shift, and go to state 73
    NE          shift, and go to state 74
    OR          shift, and go to state 75
    PLUS        shift, and go to state 76
    RPAR        shift, and go to state 92


State 55

   48 Expr: Expr • ASSIGN Expr
   49     | Expr • COMMA Expr
   50     | Expr • PLUS Expr
   51     | Expr • MINUS Expr
   52     | Expr • MUL Expr
   53     | Expr • DIV Expr
   54     | Expr • MOD Expr
   55     | Expr • OR Expr
   56     | Expr • AND Expr
   57     | Expr • BITWISEOR Expr
   58     | Expr • BITWISEXOR Expr
   59     | Expr • BITWISEAND Expr
   60     | Expr • EQ Expr
   61     | Expr • NE Expr
   62     | Expr • LE Expr
   63     | Expr • GE Expr
   64     | Expr • LT Expr
   65     | Expr • GT Expr
   66     | MINUS Expr •  [BITWISEAND, BITWISEOR, BITWISEXOR, AND, ASSIGN, COMMA, EQ, GE, GT, LE, LT, MINUS, NE, OR, PLUS, RPAR, SEMI]

    MUL  shift, and go to state 64
    DIV  shift, and go to state 66
    MOD  shift, and go to state 73

    $default  reduce using rule 66 (Expr)

    Conflict between rule 66 and token BITWISEAND resolved as reduce (BITWISEAND < MINUS).
    Conflict between rule 66 and token BITWISEOR resolved as reduce (BITWISEOR < MINUS).
    Conflict between rule 66 and token BITWISEXOR resolved as reduce (BITWISEXOR < MINUS).
    Conflict between rule 66 and token AND resolved as reduce (AND < MINUS).
    Conflict between rule 66 and token ASSIGN resolved as reduce (ASSIGN < MINUS).
    Conflict between rule 66 and token MUL resolved as shift (MINUS < MUL).
    Conflict between rule 66 and token COMMA resolved as reduce (COMMA < MINUS).
    Conflict between rule 66 and token DIV resolved as shift (MINUS < DIV).
    Conflict between rule 66 and token EQ resolved as reduce (EQ < MINUS).
    Conflict between rule 66 and token GE resolved as reduce (GE < MINUS).
    Conflict between rule 66 and token GT resolved as reduce (GT < MINUS).
    Conflict between rule 66 and token LE resolved as reduce (LE < MINUS).
    Conflict between rule 66 and token LT resolved as reduce (LT < MINUS).
    Conflict between rule 66 and token MINUS resolved as reduce (%left MINUS).
    Conflict between rule 66 and token MOD resolved as shift (MINUS < MOD).
    Conflict between rule 66 and token NE resolved as reduce (NE < MINUS).
    Conflict between rule 66 and token OR resolved as reduce (OR < MINUS).
    Conflict between rule 66 and token PLUS resolved as reduce (%left PLUS).


State 56

   48 Expr: Expr • ASSIGN Expr
   49     | Expr • COMMA Expr
   50     | Expr • PLUS Expr
   51     | Expr • MINUS Expr
   52     | Expr • MUL Expr
   53     | Expr • DIV Expr
   54     | Expr • MOD Expr
   55     | Expr • OR Expr
   56     | Expr • AND Expr
   57     | Expr • BITWISEOR Expr
   58     | Expr • BITWISEXOR Expr
   59     | Expr • BITWISEAND Expr
   60     | Expr • EQ Expr
   61     | Expr • NE Expr
   62     | Expr • LE Expr
   63     | Expr • GE Expr
   64     | Expr • LT Expr
   65     | Expr • GT Expr
   68     | NOT Expr •  [BITWISEAND, BITWISEOR, BITWISEXOR, AND, ASSIGN, MUL, COMMA, DIV, EQ, GE, GT, LE, LT, MINUS, MOD, NE, OR, PLUS, RPAR, SEMI]

    $default  reduce using rule 68 (Expr)

    Conflict between rule 68 and token BITWISEAND resolved as reduce (BITWISEAND < NOT).
    Conflict between rule 68 and token BITWISEOR resolved as reduce (BITWISEOR < NOT).
    Conflict between rule 68 and token BITWISEXOR resolved as reduce (BITWISEXOR < NOT).
    Conflict between rule 68 and token AND resolved as reduce (AND < NOT).
    Conflict between rule 68 and token ASSIGN resolved as reduce (ASSIGN < NOT).
    Conflict between rule 68 and token MUL resolved as reduce (MUL < NOT).
    Conflict between rule 68 and token COMMA resolved as reduce (COMMA < NOT).
    Conflict between rule 68 and token DIV resolved as reduce (DIV < NOT).
    Conflict between rule 68 and token EQ resolved as reduce (EQ < NOT).
    Conflict between rule 68 and token GE resolved as reduce (GE < NOT).
    Conflict between rule 68 and token GT resolved as reduce (GT < NOT).
    Conflict between rule 68 and token LE resolved as reduce (LE < NOT).
    Conflict between rule 68 and token LT resolved as reduce (LT < NOT).
    Conflict between rule 68 and token MINUS resolved as reduce (MINUS < NOT).
    Conflict between rule 68 and token MOD resolved as reduce (MOD < NOT).
    Conflict between rule 68 and token NE resolved as reduce (NE < NOT).
    Conflict between rule 68 and token OR resolved as reduce (OR < NOT).
    Conflict between rule 68 and token PLUS resolved as reduce (PLUS < NOT).


State 57

   48 Expr: Expr • ASSIGN Expr
   49     | Expr • COMMA Expr
   50     | Expr • PLUS Expr
   51     | Expr • MINUS Expr
   52     | Expr • MUL Expr
   53     | Expr • DIV Expr
   54     | Expr • MOD Expr
   55     | Expr • OR Expr
   56     | Expr • AND Expr
   57     | Expr • BITWISEOR Expr
   58     | Expr • BITWISEXOR Expr
   59     | Expr • BITWISEAND Expr
   60     | Expr • EQ Expr
   61     | Expr • NE Expr
   62     | Expr • LE Expr
   63     | Expr • GE Expr
   64     | Expr • LT Expr
   65     | Expr • GT Expr
   67     | PLUS Expr •  [BITWISEAND, BITWISEOR, BITWISEXOR, AND, ASSIGN, COMMA, EQ, GE, GT, LE, LT, MINUS, NE, OR, PLUS, RPAR, SEMI]

    MUL  shift, and go to state 64
    DIV  shift, and go to state 66
    MOD  shift, and go to state 73

    $default  reduce using rule 67 (Expr)

    Conflict between rule 67 and token BITWISEAND resolved as reduce (BITWISEAND < PLUS).
    Conflict between rule 67 and token BITWISEOR resolved as reduce (BITWISEOR < PLUS).
    Conflict between rule 67 and token BITWISEXOR resolved as reduce (BITWISEXOR < PLUS).
    Conflict between rule 67 and token AND resolved as reduce (AND < PLUS).
    Conflict between rule 67 and token ASSIGN resolved as reduce (ASSIGN < PLUS).
    Conflict between rule 67 and token MUL resolved as shift (PLUS < MUL).
    Conflict between rule 67 and token COMMA resolved as reduce (COMMA < PLUS).
    Conflict between rule 67 and token DIV resolved as shift (PLUS < DIV).
    Conflict between rule 67 and token EQ resolved as reduce (EQ < PLUS).
    Conflict between rule 67 and token GE resolved as reduce (GE < PLUS).
    Conflict between rule 67 and token GT resolved as reduce (GT < PLUS).
    Conflict between rule 67 and token LE resolved as reduce (LE < PLUS).
    Conflict between rule 67 and token LT resolved as reduce (LT < PLUS).
    Conflict between rule 67 and token MINUS resolved as reduce (%left MINUS).
    Conflict between rule 67 and token MOD resolved as shift (PLUS < MOD).
    Conflict between rule 67 and token NE resolved as reduce (NE < PLUS).
    Conflict between rule 67 and token OR resolved as reduce (OR < PLUS).
    Conflict between rule 67 and token PLUS resolved as reduce (%left PLUS).


State 58

   69 Expr: IDENTIFIER LPAR • RPAR
   70     | IDENTIFIER LPAR • ExprList RPAR
   71 ExprList: • COMMA Expr
   72         | • ExprList COMMA Expr

    COMMA  shift, and go to state 93
    RPAR   shift, and go to state 94

    ExprList  go to state 95


State 59

   43 Expr: • IDENTIFIER
   44     | • NATURAL
   45     | • CHRLIT
   46     | • DECIMAL
   47     | • LPAR Expr RPAR
   48     | • Expr ASSIGN Expr
   49     | • Expr COMMA Expr
   50     | • Expr PLUS Expr
   51     | • Expr MINUS Expr
   52     | • Expr MUL Expr
   53     | • Expr DIV Expr
   54     | • Expr MOD Expr
   55     | • Expr OR Expr
   56     | • Expr AND Expr
   57     | • Expr BITWISEOR Expr
   58     | • Expr BITWISEXOR Expr
   59     | • Expr BITWISEAND Expr
   59     | Expr BITWISEAND • Expr
   60     | • Expr EQ Expr
   61     | • Expr NE Expr
   62     | • Expr LE Expr
   63     | • Expr GE Expr
   64     | • Expr LT Expr
   65     | • Expr GT Expr
   66     | • MINUS Expr
   67     | • PLUS Expr
   68     | • NOT Expr
   69     | • IDENTIFIER LPAR RPAR
   70     | • IDENTIFIER LPAR ExprList RPAR

    LPAR        shift, and go to state 27
    MINUS       shift, and go to state 28
    NOT         shift, and go to state 29
    PLUS        shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    NATURAL     shift, and go to state 32
    DECIMAL     shift, and go to state 33
    CHRLIT      shift, and go to state 34

    Expr  go to state 96


State 60

   43 Expr: • IDENTIFIER
   44     | • NATURAL
   45     | • CHRLIT
   46     | • DECIMAL
   47     | • LPAR Expr RPAR
   48     | • Expr ASSIGN Expr
   49     | • Expr COMMA Expr
   50     | • Expr PLUS Expr
   51     | • Expr MINUS Expr
   52     | • Expr MUL Expr
   53     | • Expr DIV Expr
   54     | • Expr MOD Expr
   55     | • Expr OR Expr
   56     | • Expr AND Expr
   57     | • Expr BITWISEOR Expr
   57     | Expr BITWISEOR • Expr
   58     | • Expr BITWISEXOR Expr
   59     | • Expr BITWISEAND Expr
   60     | • Expr EQ Expr
   61     | • Expr NE Expr
   62     | • Expr LE Expr
   63     | • Expr GE Expr
   64     | • Expr LT Expr
   65     | • Expr GT Expr
   66     | • MINUS Expr
   67     | • PLUS Expr
   68     | • NOT Expr
   69     | • IDENTIFIER LPAR RPAR
   70     | • IDENTIFIER LPAR ExprList RPAR

    LPAR        shift, and go to state 27
    MINUS       shift, and go to state 28
    NOT         shift, and go to state 29
    PLUS        shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    NATURAL     shift, and go to state 32
    DECIMAL     shift, and go to state 33
    CHRLIT      shift, and go to state 34

    Expr  go to state 97


State 61

   43 Expr: • IDENTIFIER
   44     | • NATURAL
   45     | • CHRLIT
   46     | • DECIMAL
   47     | • LPAR Expr RPAR
   48     | • Expr ASSIGN Expr
   49     | • Expr COMMA Expr
   50     | • Expr PLUS Expr
   51     | • Expr MINUS Expr
   52     | • Expr MUL Expr
   53     | • Expr DIV Expr
   54     | • Expr MOD Expr
   55     | • Expr OR Expr
   56     | • Expr AND Expr
   57     | • Expr BITWISEOR Expr
   58     | • Expr BITWISEXOR Expr
   58     | Expr BITWISEXOR • Expr
   59     | • Expr BITWISEAND Expr
   60     | • Expr EQ Expr
   61     | • Expr NE Expr
   62     | • Expr LE Expr
   63     | • Expr GE Expr
   64     | • Expr LT Expr
   65     | • Expr GT Expr
   66     | • MINUS Expr
   67     | • PLUS Expr
   68     | • NOT Expr
   69     | • IDENTIFIER LPAR RPAR
   70     | • IDENTIFIER LPAR ExprList RPAR

    LPAR        shift, and go to state 27
    MINUS       shift, and go to state 28
    NOT         shift, and go to state 29
    PLUS        shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    NATURAL     shift, and go to state 32
    DECIMAL     shift, and go to state 33
    CHRLIT      shift, and go to state 34

    Expr  go to state 98


State 62

   43 Expr: • IDENTIFIER
   44     | • NATURAL
   45     | • CHRLIT
   46     | • DECIMAL
   47     | • LPAR Expr RPAR
   48     | • Expr ASSIGN Expr
   49     | • Expr COMMA Expr
   50     | • Expr PLUS Expr
   51     | • Expr MINUS Expr
   52     | • Expr MUL Expr
   53     | • Expr DIV Expr
   54     | • Expr MOD Expr
   55     | • Expr OR Expr
   56     | • Expr AND Expr
   56     | Expr AND • Expr
   57     | • Expr BITWISEOR Expr
   58     | • Expr BITWISEXOR Expr
   59     | • Expr BITWISEAND Expr
   60     | • Expr EQ Expr
   61     | • Expr NE Expr
   62     | • Expr LE Expr
   63     | • Expr GE Expr
   64     | • Expr LT Expr
   65     | • Expr GT Expr
   66     | • MINUS Expr
   67     | • PLUS Expr
   68     | • NOT Expr
   69     | • IDENTIFIER LPAR RPAR
   70     | • IDENTIFIER LPAR ExprList RPAR

    LPAR        shift, and go to state 27
    MINUS       shift, and go to state 28
    NOT         shift, and go to state 29
    PLUS        shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    NATURAL     shift, and go to state 32
    DECIMAL     shift, and go to state 33
    CHRLIT      shift, and go to state 34

    Expr  go to state 99


State 63

   43 Expr: • IDENTIFIER
   44     | • NATURAL
   45     | • CHRLIT
   46     | • DECIMAL
   47     | • LPAR Expr RPAR
   48     | • Expr ASSIGN Expr
   48     | Expr ASSIGN • Expr
   49     | • Expr COMMA Expr
   50     | • Expr PLUS Expr
   51     | • Expr MINUS Expr
   52     | • Expr MUL Expr
   53     | • Expr DIV Expr
   54     | • Expr MOD Expr
   55     | • Expr OR Expr
   56     | • Expr AND Expr
   57     | • Expr BITWISEOR Expr
   58     | • Expr BITWISEXOR Expr
   59     | • Expr BITWISEAND Expr
   60     | • Expr EQ Expr
   61     | • Expr NE Expr
   62     | • Expr LE Expr
   63     | • Expr GE Expr
   64     | • Expr LT Expr
   65     | • Expr GT Expr
   66     | • MINUS Expr
   67     | • PLUS Expr
   68     | • NOT Expr
   69     | • IDENTIFIER LPAR RPAR
   70     | • IDENTIFIER LPAR ExprList RPAR

    LPAR        shift, and go to state 27
    MINUS       shift, and go to state 28
    NOT         shift, and go to state 29
    PLUS        shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    NATURAL     shift, and go to state 32
    DECIMAL     shift, and go to state 33
    CHRLIT      shift, and go to state 34

    Expr  go to state 100


State 64

   43 Expr: • IDENTIFIER
   44     | • NATURAL
   45     | • CHRLIT
   46     | • DECIMAL
   47     | • LPAR Expr RPAR
   48     | • Expr ASSIGN Expr
   49     | • Expr COMMA Expr
   50     | • Expr PLUS Expr
   51     | • Expr MINUS Expr
   52     | • Expr MUL Expr
   52     | Expr MUL • Expr
   53     | • Expr DIV Expr
   54     | • Expr MOD Expr
   55     | • Expr OR Expr
   56     | • Expr AND Expr
   57     | • Expr BITWISEOR Expr
   58     | • Expr BITWISEXOR Expr
   59     | • Expr BITWISEAND Expr
   60     | • Expr EQ Expr
   61     | • Expr NE Expr
   62     | • Expr LE Expr
   63     | • Expr GE Expr
   64     | • Expr LT Expr
   65     | • Expr GT Expr
   66     | • MINUS Expr
   67     | • PLUS Expr
   68     | • NOT Expr
   69     | • IDENTIFIER LPAR RPAR
   70     | • IDENTIFIER LPAR ExprList RPAR

    LPAR        shift, and go to state 27
    MINUS       shift, and go to state 28
    NOT         shift, and go to state 29
    PLUS        shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    NATURAL     shift, and go to state 32
    DECIMAL     shift, and go to state 33
    CHRLIT      shift, and go to state 34

    Expr  go to state 101


State 65

   43 Expr: • IDENTIFIER
   44     | • NATURAL
   45     | • CHRLIT
   46     | • DECIMAL
   47     | • LPAR Expr RPAR
   48     | • Expr ASSIGN Expr
   49     | • Expr COMMA Expr
   49     | Expr COMMA • Expr
   50     | • Expr PLUS Expr
   51     | • Expr MINUS Expr
   52     | • Expr MUL Expr
   53     | • Expr DIV Expr
   54     | • Expr MOD Expr
   55     | • Expr OR Expr
   56     | • Expr AND Expr
   57     | • Expr BITWISEOR Expr
   58     | • Expr BITWISEXOR Expr
   59     | • Expr BITWISEAND Expr
   60     | • Expr EQ Expr
   61     | • Expr NE Expr
   62     | • Expr LE Expr
   63     | • Expr GE Expr
   64     | • Expr LT Expr
   65     | • Expr GT Expr
   66     | • MINUS Expr
   67     | • PLUS Expr
   68     | • NOT Expr
   69     | • IDENTIFIER LPAR RPAR
   70     | • IDENTIFIER LPAR ExprList RPAR

    LPAR        shift, and go to state 27
    MINUS       shift, and go to state 28
    NOT         shift, and go to state 29
    PLUS        shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    NATURAL     shift, and go to state 32
    DECIMAL     shift, and go to state 33
    CHRLIT      shift, and go to state 34

    Expr  go to state 102


State 66

   43 Expr: • IDENTIFIER
   44     | • NATURAL
   45     | • CHRLIT
   46     | • DECIMAL
   47     | • LPAR Expr RPAR
   48     | • Expr ASSIGN Expr
   49     | • Expr COMMA Expr
   50     | • Expr PLUS Expr
   51     | • Expr MINUS Expr
   52     | • Expr MUL Expr
   53     | • Expr DIV Expr
   53     | Expr DIV • Expr
   54     | • Expr MOD Expr
   55     | • Expr OR Expr
   56     | • Expr AND Expr
   57     | • Expr BITWISEOR Expr
   58     | • Expr BITWISEXOR Expr
   59     | • Expr BITWISEAND Expr
   60     | • Expr EQ Expr
   61     | • Expr NE Expr
   62     | • Expr LE Expr
   63     | • Expr GE Expr
   64     | • Expr LT Expr
   65     | • Expr GT Expr
   66     | • MINUS Expr
   67     | • PLUS Expr
   68     | • NOT Expr
   69     | • IDENTIFIER LPAR RPAR
   70     | • IDENTIFIER LPAR ExprList RPAR

    LPAR        shift, and go to state 27
    MINUS       shift, and go to state 28
    NOT         shift, and go to state 29
    PLUS        shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    NATURAL     shift, and go to state 32
    DECIMAL     shift, and go to state 33
    CHRLIT      shift, and go to state 34

    Expr  go to state 103


State 67

   43 Expr: • IDENTIFIER
   44     | • NATURAL
   45     | • CHRLIT
   46     | • DECIMAL
   47     | • LPAR Expr RPAR
   48     | • Expr ASSIGN Expr
   49     | • Expr COMMA Expr
   50     | • Expr PLUS Expr
   51     | • Expr MINUS Expr
   52     | • Expr MUL Expr
   53     | • Expr DIV Expr
   54     | • Expr MOD Expr
   55     | • Expr OR Expr
   56     | • Expr AND Expr
   57     | • Expr BITWISEOR Expr
   58     | • Expr BITWISEXOR Expr
   59     | • Expr BITWISEAND Expr
   60     | • Expr EQ Expr
   60     | Expr EQ • Expr
   61     | • Expr NE Expr
   62     | • Expr LE Expr
   63     | • Expr GE Expr
   64     | • Expr LT Expr
   65     | • Expr GT Expr
   66     | • MINUS Expr
   67     | • PLUS Expr
   68     | • NOT Expr
   69     | • IDENTIFIER LPAR RPAR
   70     | • IDENTIFIER LPAR ExprList RPAR

    LPAR        shift, and go to state 27
    MINUS       shift, and go to state 28
    NOT         shift, and go to state 29
    PLUS        shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    NATURAL     shift, and go to state 32
    DECIMAL     shift, and go to state 33
    CHRLIT      shift, and go to state 34

    Expr  go to state 104


State 68

   43 Expr: • IDENTIFIER
   44     | • NATURAL
   45     | • CHRLIT
   46     | • DECIMAL
   47     | • LPAR Expr RPAR
   48     | • Expr ASSIGN Expr
   49     | • Expr COMMA Expr
   50     | • Expr PLUS Expr
   51     | • Expr MINUS Expr
   52     | • Expr MUL Expr
   53     | • Expr DIV Expr
   54     | • Expr MOD Expr
   55     | • Expr OR Expr
   56     | • Expr AND Expr
   57     | • Expr BITWISEOR Expr
   58     | • Expr BITWISEXOR Expr
   59     | • Expr BITWISEAND Expr
   60     | • Expr EQ Expr
   61     | • Expr NE Expr
   62     | • Expr LE Expr
   63     | • Expr GE Expr
   63     | Expr GE • Expr
   64     | • Expr LT Expr
   65     | • Expr GT Expr
   66     | • MINUS Expr
   67     | • PLUS Expr
   68     | • NOT Expr
   69     | • IDENTIFIER LPAR RPAR
   70     | • IDENTIFIER LPAR ExprList RPAR

    LPAR        shift, and go to state 27
    MINUS       shift, and go to state 28
    NOT         shift, and go to state 29
    PLUS        shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    NATURAL     shift, and go to state 32
    DECIMAL     shift, and go to state 33
    CHRLIT      shift, and go to state 34

    Expr  go to state 105


State 69

   43 Expr: • IDENTIFIER
   44     | • NATURAL
   45     | • CHRLIT
   46     | • DECIMAL
   47     | • LPAR Expr RPAR
   48     | • Expr ASSIGN Expr
   49     | • Expr COMMA Expr
   50     | • Expr PLUS Expr
   51     | • Expr MINUS Expr
   52     | • Expr MUL Expr
   53     | • Expr DIV Expr
   54     | • Expr MOD Expr
   55     | • Expr OR Expr
   56     | • Expr AND Expr
   57     | • Expr BITWISEOR Expr
   58     | • Expr BITWISEXOR Expr
   59     | • Expr BITWISEAND Expr
   60     | • Expr EQ Expr
   61     | • Expr NE Expr
   62     | • Expr LE Expr
   63     | • Expr GE Expr
   64     | • Expr LT Expr
   65     | • Expr GT Expr
   65     | Expr GT • Expr
   66     | • MINUS Expr
   67     | • PLUS Expr
   68     | • NOT Expr
   69     | • IDENTIFIER LPAR RPAR
   70     | • IDENTIFIER LPAR ExprList RPAR

    LPAR        shift, and go to state 27
    MINUS       shift, and go to state 28
    NOT         shift, and go to state 29
    PLUS        shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    NATURAL     shift, and go to state 32
    DECIMAL     shift, and go to state 33
    CHRLIT      shift, and go to state 34

    Expr  go to state 106


State 70

   43 Expr: • IDENTIFIER
   44     | • NATURAL
   45     | • CHRLIT
   46     | • DECIMAL
   47     | • LPAR Expr RPAR
   48     | • Expr ASSIGN Expr
   49     | • Expr COMMA Expr
   50     | • Expr PLUS Expr
   51     | • Expr MINUS Expr
   52     | • Expr MUL Expr
   53     | • Expr DIV Expr
   54     | • Expr MOD Expr
   55     | • Expr OR Expr
   56     | • Expr AND Expr
   57     | • Expr BITWISEOR Expr
   58     | • Expr BITWISEXOR Expr
   59     | • Expr BITWISEAND Expr
   60     | • Expr EQ Expr
   61     | • Expr NE Expr
   62     | • Expr LE Expr
   62     | Expr LE • Expr
   63     | • Expr GE Expr
   64     | • Expr LT Expr
   65     | • Expr GT Expr
   66     | • MINUS Expr
   67     | • PLUS Expr
   68     | • NOT Expr
   69     | • IDENTIFIER LPAR RPAR
   70     | • IDENTIFIER LPAR ExprList RPAR

    LPAR        shift, and go to state 27
    MINUS       shift, and go to state 28
    NOT         shift, and go to state 29
    PLUS        shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    NATURAL     shift, and go to state 32
    DECIMAL     shift, and go to state 33
    CHRLIT      shift, and go to state 34

    Expr  go to state 107


State 71

   43 Expr: • IDENTIFIER
   44     | • NATURAL
   45     | • CHRLIT
   46     | • DECIMAL
   47     | • LPAR Expr RPAR
   48     | • Expr ASSIGN Expr
   49     | • Expr COMMA Expr
   50     | • Expr PLUS Expr
   51     | • Expr MINUS Expr
   52     | • Expr MUL Expr
   53     | • Expr DIV Expr
   54     | • Expr MOD Expr
   55     | • Expr OR Expr
   56     | • Expr AND Expr
   57     | • Expr BITWISEOR Expr
   58     | • Expr BITWISEXOR Expr
   59     | • Expr BITWISEAND Expr
   60     | • Expr EQ Expr
   61     | • Expr NE Expr
   62     | • Expr LE Expr
   63     | • Expr GE Expr
   64     | • Expr LT Expr
   64     | Expr LT • Expr
   65     | • Expr GT Expr
   66     | • MINUS Expr
   67     | • PLUS Expr
   68     | • NOT Expr
   69     | • IDENTIFIER LPAR RPAR
   70     | • IDENTIFIER LPAR ExprList RPAR

    LPAR        shift, and go to state 27
    MINUS       shift, and go to state 28
    NOT         shift, and go to state 29
    PLUS        shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    NATURAL     shift, and go to state 32
    DECIMAL     shift, and go to state 33
    CHRLIT      shift, and go to state 34

    Expr  go to state 108


State 72

   43 Expr: • IDENTIFIER
   44     | • NATURAL
   45     | • CHRLIT
   46     | • DECIMAL
   47     | • LPAR Expr RPAR
   48     | • Expr ASSIGN Expr
   49     | • Expr COMMA Expr
   50     | • Expr PLUS Expr
   51     | • Expr MINUS Expr
   51     | Expr MINUS • Expr
   52     | • Expr MUL Expr
   53     | • Expr DIV Expr
   54     | • Expr MOD Expr
   55     | • Expr OR Expr
   56     | • Expr AND Expr
   57     | • Expr BITWISEOR Expr
   58     | • Expr BITWISEXOR Expr
   59     | • Expr BITWISEAND Expr
   60     | • Expr EQ Expr
   61     | • Expr NE Expr
   62     | • Expr LE Expr
   63     | • Expr GE Expr
   64     | • Expr LT Expr
   65     | • Expr GT Expr
   66     | • MINUS Expr
   67     | • PLUS Expr
   68     | • NOT Expr
   69     | • IDENTIFIER LPAR RPAR
   70     | • IDENTIFIER LPAR ExprList RPAR

    LPAR        shift, and go to state 27
    MINUS       shift, and go to state 28
    NOT         shift, and go to state 29
    PLUS        shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    NATURAL     shift, and go to state 32
    DECIMAL     shift, and go to state 33
    CHRLIT      shift, and go to state 34

    Expr  go to state 109


State 73

   43 Expr: • IDENTIFIER
   44     | • NATURAL
   45     | • CHRLIT
   46     | • DECIMAL
   47     | • LPAR Expr RPAR
   48     | • Expr ASSIGN Expr
   49     | • Expr COMMA Expr
   50     | • Expr PLUS Expr
   51     | • Expr MINUS Expr
   52     | • Expr MUL Expr
   53     | • Expr DIV Expr
   54     | • Expr MOD Expr
   54     | Expr MOD • Expr
   55     | • Expr OR Expr
   56     | • Expr AND Expr
   57     | • Expr BITWISEOR Expr
   58     | • Expr BITWISEXOR Expr
   59     | • Expr BITWISEAND Expr
   60     | • Expr EQ Expr
   61     | • Expr NE Expr
   62     | • Expr LE Expr
   63     | • Expr GE Expr
   64     | • Expr LT Expr
   65     | • Expr GT Expr
   66     | • MINUS Expr
   67     | • PLUS Expr
   68     | • NOT Expr
   69     | • IDENTIFIER LPAR RPAR
   70     | • IDENTIFIER LPAR ExprList RPAR

    LPAR        shift, and go to state 27
    MINUS       shift, and go to state 28
    NOT         shift, and go to state 29
    PLUS        shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    NATURAL     shift, and go to state 32
    DECIMAL     shift, and go to state 33
    CHRLIT      shift, and go to state 34

    Expr  go to state 110


State 74

   43 Expr: • IDENTIFIER
   44     | • NATURAL
   45     | • CHRLIT
   46     | • DECIMAL
   47     | • LPAR Expr RPAR
   48     | • Expr ASSIGN Expr
   49     | • Expr COMMA Expr
   50     | • Expr PLUS Expr
   51     | • Expr MINUS Expr
   52     | • Expr MUL Expr
   53     | • Expr DIV Expr
   54     | • Expr MOD Expr
   55     | • Expr OR Expr
   56     | • Expr AND Expr
   57     | • Expr BITWISEOR Expr
   58     | • Expr BITWISEXOR Expr
   59     | • Expr BITWISEAND Expr
   60     | • Expr EQ Expr
   61     | • Expr NE Expr
   61     | Expr NE • Expr
   62     | • Expr LE Expr
   63     | • Expr GE Expr
   64     | • Expr LT Expr
   65     | • Expr GT Expr
   66     | • MINUS Expr
   67     | • PLUS Expr
   68     | • NOT Expr
   69     | • IDENTIFIER LPAR RPAR
   70     | • IDENTIFIER LPAR ExprList RPAR

    LPAR        shift, and go to state 27
    MINUS       shift, and go to state 28
    NOT         shift, and go to state 29
    PLUS        shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    NATURAL     shift, and go to state 32
    DECIMAL     shift, and go to state 33
    CHRLIT      shift, and go to state 34

    Expr  go to state 111


State 75

   43 Expr: • IDENTIFIER
   44     | • NATURAL
   45     | • CHRLIT
   46     | • DECIMAL
   47     | • LPAR Expr RPAR
   48     | • Expr ASSIGN Expr
   49     | • Expr COMMA Expr
   50     | • Expr PLUS Expr
   51     | • Expr MINUS Expr
   52     | • Expr MUL Expr
   53     | • Expr DIV Expr
   54     | • Expr MOD Expr
   55     | • Expr OR Expr
   55     | Expr OR • Expr
   56     | • Expr AND Expr
   57     | • Expr BITWISEOR Expr
   58     | • Expr BITWISEXOR Expr
   59     | • Expr BITWISEAND Expr
   60     | • Expr EQ Expr
   61     | • Expr NE Expr
   62     | • Expr LE Expr
   63     | • Expr GE Expr
   64     | • Expr LT Expr
   65     | • Expr GT Expr
   66     | • MINUS Expr
   67     | • PLUS Expr
   68     | • NOT Expr
   69     | • IDENTIFIER LPAR RPAR
   70     | • IDENTIFIER LPAR ExprList RPAR

    LPAR        shift, and go to state 27
    MINUS       shift, and go to state 28
    NOT         shift, and go to state 29
    PLUS        shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    NATURAL     shift, and go to state 32
    DECIMAL     shift, and go to state 33
    CHRLIT      shift, and go to state 34

    Expr  go to state 112


State 76

   43 Expr: • IDENTIFIER
   44     | • NATURAL
   45     | • CHRLIT
   46     | • DECIMAL
   47     | • LPAR Expr RPAR
   48     | • Expr ASSIGN Expr
   49     | • Expr COMMA Expr
   50     | • Expr PLUS Expr
   50     | Expr PLUS • Expr
   51     | • Expr MINUS Expr
   52     | • Expr MUL Expr
   53     | • Expr DIV Expr
   54     | • Expr MOD Expr
   55     | • Expr OR Expr
   56     | • Expr AND Expr
   57     | • Expr BITWISEOR Expr
   58     | • Expr BITWISEXOR Expr
   59     | • Expr BITWISEAND Expr
   60     | • Expr EQ Expr
   61     | • Expr NE Expr
   62     | • Expr LE Expr
   63     | • Expr GE Expr
   64     | • Expr LT Expr
   65     | • Expr GT Expr
   66     | • MINUS Expr
   67     | • PLUS Expr
   68     | • NOT Expr
   69     | • IDENTIFIER LPAR RPAR
   70     | • IDENTIFIER LPAR ExprList RPAR

    LPAR        shift, and go to state 27
    MINUS       shift, and go to state 28
    NOT         shift, and go to state 29
    PLUS        shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    NATURAL     shift, and go to state 32
    DECIMAL     shift, and go to state 33
    CHRLIT      shift, and go to state 34

    Expr  go to state 113


State 77

   16 FunctionDeclarator: IDENTIFIER LPAR ParameterList RPAR •

    $default  reduce using rule 16 (FunctionDeclarator)


State 78

   17 ParameterList: • ParameterDeclaration
   18              | • ParameterDeclaration COMMA ParameterList
   18              | ParameterDeclaration COMMA • ParameterList
   19 ParameterDeclaration: • TypeSpec IDENTIFIER
   20                     | • TypeSpec
   25 TypeSpec: • CHAR
   26         | • INT
   27         | • VOID
   28         | • SHORT
   29         | • DOUBLE

    CHAR    shift, and go to state 1
    DOUBLE  shift, and go to state 2
    INT     shift, and go to state 3
    SHORT   shift, and go to state 4
    VOID    shift, and go to state 5

    ParameterList         go to state 114
    ParameterDeclaration  go to state 37
    TypeSpec              go to state 38


State 79

   19 ParameterDeclaration: TypeSpec IDENTIFIER •

    $default  reduce using rule 19 (ParameterDeclaration)


State 80

   38 Statement: WHILE LPAR • Expr RPAR Statement
   43 Expr: • IDENTIFIER
   44     | • NATURAL
   45     | • CHRLIT
   46     | • DECIMAL
   47     | • LPAR Expr RPAR
   48     | • Expr ASSIGN Expr
   49     | • Expr COMMA Expr
   50     | • Expr PLUS Expr
   51     | • Expr MINUS Expr
   52     | • Expr MUL Expr
   53     | • Expr DIV Expr
   54     | • Expr MOD Expr
   55     | • Expr OR Expr
   56     | • Expr AND Expr
   57     | • Expr BITWISEOR Expr
   58     | • Expr BITWISEXOR Expr
   59     | • Expr BITWISEAND Expr
   60     | • Expr EQ Expr
   61     | • Expr NE Expr
   62     | • Expr LE Expr
   63     | • Expr GE Expr
   64     | • Expr LT Expr
   65     | • Expr GT Expr
   66     | • MINUS Expr
   67     | • PLUS Expr
   68     | • NOT Expr
   69     | • IDENTIFIER LPAR RPAR
   70     | • IDENTIFIER LPAR ExprList RPAR

    LPAR        shift, and go to state 27
    MINUS       shift, and go to state 28
    NOT         shift, and go to state 29
    PLUS        shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    NATURAL     shift, and go to state 32
    DECIMAL     shift, and go to state 33
    CHRLIT      shift, and go to state 34

    Expr  go to state 115


State 81

   36 Statement: IF LPAR • Expr RPAR Statement
   37          | IF LPAR • Expr RPAR Statement ELSE Statement
   43 Expr: • IDENTIFIER
   44     | • NATURAL
   45     | • CHRLIT
   46     | • DECIMAL
   47     | • LPAR Expr RPAR
   48     | • Expr ASSIGN Expr
   49     | • Expr COMMA Expr
   50     | • Expr PLUS Expr
   51     | • Expr MINUS Expr
   52     | • Expr MUL Expr
   53     | • Expr DIV Expr
   54     | • Expr MOD Expr
   55     | • Expr OR Expr
   56     | • Expr AND Expr
   57     | • Expr BITWISEOR Expr
   58     | • Expr BITWISEXOR Expr
   59     | • Expr BITWISEAND Expr
   60     | • Expr EQ Expr
   61     | • Expr NE Expr
   62     | • Expr LE Expr
   63     | • Expr GE Expr
   64     | • Expr LT Expr
   65     | • Expr GT Expr
   66     | • MINUS Expr
   67     | • PLUS Expr
   68     | • NOT Expr
   69     | • IDENTIFIER LPAR RPAR
   70     | • IDENTIFIER LPAR ExprList RPAR

    LPAR        shift, and go to state 27
    MINUS       shift, and go to state 28
    NOT         shift, and go to state 29
    PLUS        shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    NATURAL     shift, and go to state 32
    DECIMAL     shift, and go to state 33
    CHRLIT      shift, and go to state 34

    Expr  go to state 116


State 82

   39 Statement: RETURN SEMI •

    $default  reduce using rule 39 (Statement)


State 83

   40 Statement: RETURN Expr • SEMI
   48 Expr: Expr • ASSIGN Expr
   49     | Expr • COMMA Expr
   50     | Expr • PLUS Expr
   51     | Expr • MINUS Expr
   52     | Expr • MUL Expr
   53     | Expr • DIV Expr
   54     | Expr • MOD Expr
   55     | Expr • OR Expr
   56     | Expr • AND Expr
   57     | Expr • BITWISEOR Expr
   58     | Expr • BITWISEXOR Expr
   59     | Expr • BITWISEAND Expr
   60     | Expr • EQ Expr
   61     | Expr • NE Expr
   62     | Expr • LE Expr
   63     | Expr • GE Expr
   64     | Expr • LT Expr
   65     | Expr • GT Expr

    BITWISEAND  shift, and go to state 59
    BITWISEOR   shift, and go to state 60
    BITWISEXOR  shift, and go to state 61
    AND         shift, and go to state 62
    ASSIGN      shift, and go to state 63
    MUL         shift, and go to state 64
    COMMA       shift, and go to state 65
    DIV         shift, and go to state 66
    EQ          shift, and go to state 67
    GE          shift, and go to state 68
    GT          shift, and go to state 69
    LE          shift, and go to state 70
    LT          shift, and go to state 71
    MINUS       shift, and go to state 72
    MOD         shift, and go to state 73
    NE          shift, and go to state 74
    OR          shift, and go to state 75
    PLUS        shift, and go to state 76
    SEMI        shift, and go to state 117


State 84

   34 Statement: LBRACE RBRACE •

    $default  reduce using rule 34 (Statement)


State 85

   41 Statements: Statement •

    $default  reduce using rule 41 (Statements)


State 86

   32 Statement: • SEMI
   33          | • Expr SEMI
   34          | • LBRACE RBRACE
   35          | • LBRACE Statements RBRACE
   35          | LBRACE Statements • RBRACE
   36          | • IF LPAR Expr RPAR Statement
   37          | • IF LPAR Expr RPAR Statement ELSE Statement
   38          | • WHILE LPAR Expr RPAR Statement
   39          | • RETURN SEMI
   40          | • RETURN Expr SEMI
   42 Statements: Statements • Statement
   43 Expr: • IDENTIFIER
   44     | • NATURAL
   45     | • CHRLIT
   46     | • DECIMAL
   47     | • LPAR Expr RPAR
   48     | • Expr ASSIGN Expr
   49     | • Expr COMMA Expr
   50     | • Expr PLUS Expr
   51     | • Expr MINUS Expr
   52     | • Expr MUL Expr
   53     | • Expr DIV Expr
   54     | • Expr MOD Expr
   55     | • Expr OR Expr
   56     | • Expr AND Expr
   57     | • Expr BITWISEOR Expr
   58     | • Expr BITWISEXOR Expr
   59     | • Expr BITWISEAND Expr
   60     | • Expr EQ Expr
   61     | • Expr NE Expr
   62     | • Expr LE Expr
   63     | • Expr GE Expr
   64     | • Expr LT Expr
   65     | • Expr GT Expr
   66     | • MINUS Expr
   67     | • PLUS Expr
   68     | • NOT Expr
   69     | • IDENTIFIER LPAR RPAR
   70     | • IDENTIFIER LPAR ExprList RPAR

    WHILE       shift, and go to state 39
    IF          shift, and go to state 40
    RETURN      shift, and go to state 41
    LBRACE      shift, and go to state 42
    LPAR        shift, and go to state 27
    MINUS       shift, and go to state 28
    NOT         shift, and go to state 29
    PLUS        shift, and go to state 30
    RBRACE      shift, and go to state 118
    SEMI        shift, and go to state 44
    IDENTIFIER  shift, and go to state 31
    NATURAL     shift, and go to state 32
    DECIMAL     shift, and go to state 33
    CHRLIT      shift, and go to state 34

    Statement  go to state 119
    Expr       go to state 49


State 87

    9 FunctionBody: LBRACE DeclarationsAndStatements RBRACE •

    $default  reduce using rule 9 (FunctionBody)


State 88

   12 DeclarationsAndStatements: Declaration DeclarationsAndStatements •

    $default  reduce using rule 12 (DeclarationsAndStatements)


State 89

   11 DeclarationsAndStatements: Statement DeclarationsAndStatements •

    $default  reduce using rule 11 (DeclarationsAndStatements)


State 90

   33 Statement: Expr SEMI •

    $default  reduce using rule 33 (Statement)


State 91

   24 Declarations: Declarations COMMA Declarator •

    $default  reduce using rule 24 (Declarations)


State 92

   47 Expr: LPAR Expr RPAR •

    $default  reduce using rule 47 (Expr)


State 93

   43 Expr: • IDENTIFIER
   44     | • NATURAL
   45     | • CHRLIT
   46     | • DECIMAL
   47     | • LPAR Expr RPAR
   48     | • Expr ASSIGN Expr
   49     | • Expr COMMA Expr
   50     | • Expr PLUS Expr
   51     | • Expr MINUS Expr
   52     | • Expr MUL Expr
   53     | • Expr DIV Expr
   54     | • Expr MOD Expr
   55     | • Expr OR Expr
   56     | • Expr AND Expr
   57     | • Expr BITWISEOR Expr
   58     | • Expr BITWISEXOR Expr
   59     | • Expr BITWISEAND Expr
   60     | • Expr EQ Expr
   61     | • Expr NE Expr
   62     | • Expr LE Expr
   63     | • Expr GE Expr
   64     | • Expr LT Expr
   65     | • Expr GT Expr
   66     | • MINUS Expr
   67     | • PLUS Expr
   68     | • NOT Expr
   69     | • IDENTIFIER LPAR RPAR
   70     | • IDENTIFIER LPAR ExprList RPAR
   71 ExprList: COMMA • Expr

    LPAR        shift, and go to state 27
    MINUS       shift, and go to state 28
    NOT         shift, and go to state 29
    PLUS        shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    NATURAL     shift, and go to state 32
    DECIMAL     shift, and go to state 33
    CHRLIT      shift, and go to state 34

    Expr  go to state 120


State 94

   69 Expr: IDENTIFIER LPAR RPAR •

    $default  reduce using rule 69 (Expr)


State 95

   70 Expr: IDENTIFIER LPAR ExprList • RPAR
   72 ExprList: ExprList • COMMA Expr

    COMMA  shift, and go to state 121
    RPAR   shift, and go to state 122


State 96

   48 Expr: Expr • ASSIGN Expr
   49     | Expr • COMMA Expr
   50     | Expr • PLUS Expr
   51     | Expr • MINUS Expr
   52     | Expr • MUL Expr
   53     | Expr • DIV Expr
   54     | Expr • MOD Expr
   55     | Expr • OR Expr
   56     | Expr • AND Expr
   57     | Expr • BITWISEOR Expr
   58     | Expr • BITWISEXOR Expr
   59     | Expr • BITWISEAND Expr
   59     | Expr BITWISEAND Expr •  [BITWISEAND, BITWISEOR, BITWISEXOR, AND, ASSIGN, COMMA, OR, RPAR, SEMI]
   60     | Expr • EQ Expr
   61     | Expr • NE Expr
   62     | Expr • LE Expr
   63     | Expr • GE Expr
   64     | Expr • LT Expr
   65     | Expr • GT Expr

    MUL    shift, and go to state 64
    DIV    shift, and go to state 66
    EQ     shift, and go to state 67
    GE     shift, and go to state 68
    GT     shift, and go to state 69
    LE     shift, and go to state 70
    LT     shift, and go to state 71
    MINUS  shift, and go to state 72
    MOD    shift, and go to state 73
    NE     shift, and go to state 74
    PLUS   shift, and go to state 76

    $default  reduce using rule 59 (Expr)

    Conflict between rule 59 and token BITWISEAND resolved as reduce (%left BITWISEAND).
    Conflict between rule 59 and token BITWISEOR resolved as reduce (BITWISEOR < BITWISEAND).
    Conflict between rule 59 and token BITWISEXOR resolved as reduce (BITWISEXOR < BITWISEAND).
    Conflict between rule 59 and token AND resolved as reduce (AND < BITWISEAND).
    Conflict between rule 59 and token ASSIGN resolved as reduce (ASSIGN < BITWISEAND).
    Conflict between rule 59 and token MUL resolved as shift (BITWISEAND < MUL).
    Conflict between rule 59 and token COMMA resolved as reduce (COMMA < BITWISEAND).
    Conflict between rule 59 and token DIV resolved as shift (BITWISEAND < DIV).
    Conflict between rule 59 and token EQ resolved as shift (BITWISEAND < EQ).
    Conflict between rule 59 and token GE resolved as shift (BITWISEAND < GE).
    Conflict between rule 59 and token GT resolved as shift (BITWISEAND < GT).
    Conflict between rule 59 and token LE resolved as shift (BITWISEAND < LE).
    Conflict between rule 59 and token LT resolved as shift (BITWISEAND < LT).
    Conflict between rule 59 and token MINUS resolved as shift (BITWISEAND < MINUS).
    Conflict between rule 59 and token MOD resolved as shift (BITWISEAND < MOD).
    Conflict between rule 59 and token NE resolved as shift (BITWISEAND < NE).
    Conflict between rule 59 and token OR resolved as reduce (OR < BITWISEAND).
    Conflict between rule 59 and token PLUS resolved as shift (BITWISEAND < PLUS).


State 97

   48 Expr: Expr • ASSIGN Expr
   49     | Expr • COMMA Expr
   50     | Expr • PLUS Expr
   51     | Expr • MINUS Expr
   52     | Expr • MUL Expr
   53     | Expr • DIV Expr
   54     | Expr • MOD Expr
   55     | Expr • OR Expr
   56     | Expr • AND Expr
   57     | Expr • BITWISEOR Expr
   57     | Expr BITWISEOR Expr •  [BITWISEOR, AND, ASSIGN, COMMA, OR, RPAR, SEMI]
   58     | Expr • BITWISEXOR Expr
   59     | Expr • BITWISEAND Expr
   60     | Expr • EQ Expr
   61     | Expr • NE Expr
   62     | Expr • LE Expr
   63     | Expr • GE Expr
   64     | Expr • LT Expr
   65     | Expr • GT Expr

    BITWISEAND  shift, and go to state 59
    BITWISEXOR  shift, and go to state 61
    MUL         shift, and go to state 64
    DIV         shift, and go to state 66
    EQ          shift, and go to state 67
    GE          shift, and go to state 68
    GT          shift, and go to state 69
    LE          shift, and go to state 70
    LT          shift, and go to state 71
    MINUS       shift, and go to state 72
    MOD         shift, and go to state 73
    NE          shift, and go to state 74
    PLUS        shift, and go to state 76

    $default  reduce using rule 57 (Expr)

    Conflict between rule 57 and token BITWISEAND resolved as shift (BITWISEOR < BITWISEAND).
    Conflict between rule 57 and token BITWISEOR resolved as reduce (%left BITWISEOR).
    Conflict between rule 57 and token BITWISEXOR resolved as shift (BITWISEOR < BITWISEXOR).
    Conflict between rule 57 and token AND resolved as reduce (AND < BITWISEOR).
    Conflict between rule 57 and token ASSIGN resolved as reduce (ASSIGN < BITWISEOR).
    Conflict between rule 57 and token MUL resolved as shift (BITWISEOR < MUL).
    Conflict between rule 57 and token COMMA resolved as reduce (COMMA < BITWISEOR).
    Conflict between rule 57 and token DIV resolved as shift (BITWISEOR < DIV).
    Conflict between rule 57 and token EQ resolved as shift (BITWISEOR < EQ).
    Conflict between rule 57 and token GE resolved as shift (BITWISEOR < GE).
    Conflict between rule 57 and token GT resolved as shift (BITWISEOR < GT).
    Conflict between rule 57 and token LE resolved as shift (BITWISEOR < LE).
    Conflict between rule 57 and token LT resolved as shift (BITWISEOR < LT).
    Conflict between rule 57 and token MINUS resolved as shift (BITWISEOR < MINUS).
    Conflict between rule 57 and token MOD resolved as shift (BITWISEOR < MOD).
    Conflict between rule 57 and token NE resolved as shift (BITWISEOR < NE).
    Conflict between rule 57 and token OR resolved as reduce (OR < BITWISEOR).
    Conflict between rule 57 and token PLUS resolved as shift (BITWISEOR < PLUS).


State 98

   48 Expr: Expr • ASSIGN Expr
   49     | Expr • COMMA Expr
   50     | Expr • PLUS Expr
   51     | Expr • MINUS Expr
   52     | Expr • MUL Expr
   53     | Expr • DIV Expr
   54     | Expr • MOD Expr
   55     | Expr • OR Expr
   56     | Expr • AND Expr
   57     | Expr • BITWISEOR Expr
   58     | Expr • BITWISEXOR Expr
   58     | Expr BITWISEXOR Expr •  [BITWISEOR, BITWISEXOR, AND, ASSIGN, COMMA, OR, RPAR, SEMI]
   59     | Expr • BITWISEAND Expr
   60     | Expr • EQ Expr
   61     | Expr • NE Expr
   62     | Expr • LE Expr
   63     | Expr • GE Expr
   64     | Expr • LT Expr
   65     | Expr • GT Expr

    BITWISEAND  shift, and go to state 59
    MUL         shift, and go to state 64
    DIV         shift, and go to state 66
    EQ          shift, and go to state 67
    GE          shift, and go to state 68
    GT          shift, and go to state 69
    LE          shift, and go to state 70
    LT          shift, and go to state 71
    MINUS       shift, and go to state 72
    MOD         shift, and go to state 73
    NE          shift, and go to state 74
    PLUS        shift, and go to state 76

    $default  reduce using rule 58 (Expr)

    Conflict between rule 58 and token BITWISEAND resolved as shift (BITWISEXOR < BITWISEAND).
    Conflict between rule 58 and token BITWISEOR resolved as reduce (BITWISEOR < BITWISEXOR).
    Conflict between rule 58 and token BITWISEXOR resolved as reduce (%left BITWISEXOR).
    Conflict between rule 58 and token AND resolved as reduce (AND < BITWISEXOR).
    Conflict between rule 58 and token ASSIGN resolved as reduce (ASSIGN < BITWISEXOR).
    Conflict between rule 58 and token MUL resolved as shift (BITWISEXOR < MUL).
    Conflict between rule 58 and token COMMA resolved as reduce (COMMA < BITWISEXOR).
    Conflict between rule 58 and token DIV resolved as shift (BITWISEXOR < DIV).
    Conflict between rule 58 and token EQ resolved as shift (BITWISEXOR < EQ).
    Conflict between rule 58 and token GE resolved as shift (BITWISEXOR < GE).
    Conflict between rule 58 and token GT resolved as shift (BITWISEXOR < GT).
    Conflict between rule 58 and token LE resolved as shift (BITWISEXOR < LE).
    Conflict between rule 58 and token LT resolved as shift (BITWISEXOR < LT).
    Conflict between rule 58 and token MINUS resolved as shift (BITWISEXOR < MINUS).
    Conflict between rule 58 and token MOD resolved as shift (BITWISEXOR < MOD).
    Conflict between rule 58 and token NE resolved as shift (BITWISEXOR < NE).
    Conflict between rule 58 and token OR resolved as reduce (OR < BITWISEXOR).
    Conflict between rule 58 and token PLUS resolved as shift (BITWISEXOR < PLUS).


State 99

   48 Expr: Expr • ASSIGN Expr
   49     | Expr • COMMA Expr
   50     | Expr • PLUS Expr
   51     | Expr • MINUS Expr
   52     | Expr • MUL Expr
   53     | Expr • DIV Expr
   54     | Expr • MOD Expr
   55     | Expr • OR Expr
   56     | Expr • AND Expr
   56     | Expr AND Expr •  [AND, ASSIGN, COMMA, OR, RPAR, SEMI]
   57     | Expr • BITWISEOR Expr
   58     | Expr • BITWISEXOR Expr
   59     | Expr • BITWISEAND Expr
   60     | Expr • EQ Expr
   61     | Expr • NE Expr
   62     | Expr • LE Expr
   63     | Expr • GE Expr
   64     | Expr • LT Expr
   65     | Expr • GT Expr

    BITWISEAND  shift, and go to state 59
    BITWISEOR   shift, and go to state 60
    BITWISEXOR  shift, and go to state 61
    MUL         shift, and go to state 64
    DIV         shift, and go to state 66
    EQ          shift, and go to state 67
    GE          shift, and go to state 68
    GT          shift, and go to state 69
    LE          shift, and go to state 70
    LT          shift, and go to state 71
    MINUS       shift, and go to state 72
    MOD         shift, and go to state 73
    NE          shift, and go to state 74
    PLUS        shift, and go to state 76

    $default  reduce using rule 56 (Expr)

    Conflict between rule 56 and token BITWISEAND resolved as shift (AND < BITWISEAND).
    Conflict between rule 56 and token BITWISEOR resolved as shift (AND < BITWISEOR).
    Conflict between rule 56 and token BITWISEXOR resolved as shift (AND < BITWISEXOR).
    Conflict between rule 56 and token AND resolved as reduce (%left AND).
    Conflict between rule 56 and token ASSIGN resolved as reduce (ASSIGN < AND).
    Conflict between rule 56 and token MUL resolved as shift (AND < MUL).
    Conflict between rule 56 and token COMMA resolved as reduce (COMMA < AND).
    Conflict between rule 56 and token DIV resolved as shift (AND < DIV).
    Conflict between rule 56 and token EQ resolved as shift (AND < EQ).
    Conflict between rule 56 and token GE resolved as shift (AND < GE).
    Conflict between rule 56 and token GT resolved as shift (AND < GT).
    Conflict between rule 56 and token LE resolved as shift (AND < LE).
    Conflict between rule 56 and token LT resolved as shift (AND < LT).
    Conflict between rule 56 and token MINUS resolved as shift (AND < MINUS).
    Conflict between rule 56 and token MOD resolved as shift (AND < MOD).
    Conflict between rule 56 and token NE resolved as shift (AND < NE).
    Conflict between rule 56 and token OR resolved as reduce (OR < AND).
    Conflict between rule 56 and token PLUS resolved as shift (AND < PLUS).


State 100

   48 Expr: Expr • ASSIGN Expr
   48     | Expr ASSIGN Expr •  [ASSIGN, COMMA, RPAR, SEMI]
   49     | Expr • COMMA Expr
   50     | Expr • PLUS Expr
   51     | Expr • MINUS Expr
   52     | Expr • MUL Expr
   53     | Expr • DIV Expr
   54     | Expr • MOD Expr
   55     | Expr • OR Expr
   56     | Expr • AND Expr
   57     | Expr • BITWISEOR Expr
   58     | Expr • BITWISEXOR Expr
   59     | Expr • BITWISEAND Expr
   60     | Expr • EQ Expr
   61     | Expr • NE Expr
   62     | Expr • LE Expr
   63     | Expr • GE Expr
   64     | Expr • LT Expr
   65     | Expr • GT Expr

    BITWISEAND  shift, and go to state 59
    BITWISEOR   shift, and go to state 60
    BITWISEXOR  shift, and go to state 61
    AND         shift, and go to state 62
    MUL         shift, and go to state 64
    DIV         shift, and go to state 66
    EQ          shift, and go to state 67
    GE          shift, and go to state 68
    GT          shift, and go to state 69
    LE          shift, and go to state 70
    LT          shift, and go to state 71
    MINUS       shift, and go to state 72
    MOD         shift, and go to state 73
    NE          shift, and go to state 74
    OR          shift, and go to state 75
    PLUS        shift, and go to state 76

    $default  reduce using rule 48 (Expr)

    Conflict between rule 48 and token BITWISEAND resolved as shift (ASSIGN < BITWISEAND).
    Conflict between rule 48 and token BITWISEOR resolved as shift (ASSIGN < BITWISEOR).
    Conflict between rule 48 and token BITWISEXOR resolved as shift (ASSIGN < BITWISEXOR).
    Conflict between rule 48 and token AND resolved as shift (ASSIGN < AND).
    Conflict between rule 48 and token ASSIGN resolved as reduce (%left ASSIGN).
    Conflict between rule 48 and token MUL resolved as shift (ASSIGN < MUL).
    Conflict between rule 48 and token COMMA resolved as reduce (COMMA < ASSIGN).
    Conflict between rule 48 and token DIV resolved as shift (ASSIGN < DIV).
    Conflict between rule 48 and token EQ resolved as shift (ASSIGN < EQ).
    Conflict between rule 48 and token GE resolved as shift (ASSIGN < GE).
    Conflict between rule 48 and token GT resolved as shift (ASSIGN < GT).
    Conflict between rule 48 and token LE resolved as shift (ASSIGN < LE).
    Conflict between rule 48 and token LT resolved as shift (ASSIGN < LT).
    Conflict between rule 48 and token MINUS resolved as shift (ASSIGN < MINUS).
    Conflict between rule 48 and token MOD resolved as shift (ASSIGN < MOD).
    Conflict between rule 48 and token NE resolved as shift (ASSIGN < NE).
    Conflict between rule 48 and token OR resolved as shift (ASSIGN < OR).
    Conflict between rule 48 and token PLUS resolved as shift (ASSIGN < PLUS).


State 101

   48 Expr: Expr • ASSIGN Expr
   49     | Expr • COMMA Expr
   50     | Expr • PLUS Expr
   51     | Expr • MINUS Expr
   52     | Expr • MUL Expr
   52     | Expr MUL Expr •  [BITWISEAND, BITWISEOR, BITWISEXOR, AND, ASSIGN, MUL, COMMA, DIV, EQ, GE, GT, LE, LT, MINUS, MOD, NE, OR, PLUS, RPAR, SEMI]
   53     | Expr • DIV Expr
   54     | Expr • MOD Expr
   55     | Expr • OR Expr
   56     | Expr • AND Expr
   57     | Expr • BITWISEOR Expr
   58     | Expr • BITWISEXOR Expr
   59     | Expr • BITWISEAND Expr
   60     | Expr • EQ Expr
   61     | Expr • NE Expr
   62     | Expr • LE Expr
   63     | Expr • GE Expr
   64     | Expr • LT Expr
   65     | Expr • GT Expr

    $default  reduce using rule 52 (Expr)

    Conflict between rule 52 and token BITWISEAND resolved as reduce (BITWISEAND < MUL).
    Conflict between rule 52 and token BITWISEOR resolved as reduce (BITWISEOR < MUL).
    Conflict between rule 52 and token BITWISEXOR resolved as reduce (BITWISEXOR < MUL).
    Conflict between rule 52 and token AND resolved as reduce (AND < MUL).
    Conflict between rule 52 and token ASSIGN resolved as reduce (ASSIGN < MUL).
    Conflict between rule 52 and token MUL resolved as reduce (%left MUL).
    Conflict between rule 52 and token COMMA resolved as reduce (COMMA < MUL).
    Conflict between rule 52 and token DIV resolved as reduce (%left DIV).
    Conflict between rule 52 and token EQ resolved as reduce (EQ < MUL).
    Conflict between rule 52 and token GE resolved as reduce (GE < MUL).
    Conflict between rule 52 and token GT resolved as reduce (GT < MUL).
    Conflict between rule 52 and token LE resolved as reduce (LE < MUL).
    Conflict between rule 52 and token LT resolved as reduce (LT < MUL).
    Conflict between rule 52 and token MINUS resolved as reduce (MINUS < MUL).
    Conflict between rule 52 and token MOD resolved as reduce (%left MOD).
    Conflict between rule 52 and token NE resolved as reduce (NE < MUL).
    Conflict between rule 52 and token OR resolved as reduce (OR < MUL).
    Conflict between rule 52 and token PLUS resolved as reduce (PLUS < MUL).


State 102

   48 Expr: Expr • ASSIGN Expr
   49     | Expr • COMMA Expr
   49     | Expr COMMA Expr •  [COMMA, RPAR, SEMI]
   50     | Expr • PLUS Expr
   51     | Expr • MINUS Expr
   52     | Expr • MUL Expr
   53     | Expr • DIV Expr
   54     | Expr • MOD Expr
   55     | Expr • OR Expr
   56     | Expr • AND Expr
   57     | Expr • BITWISEOR Expr
   58     | Expr • BITWISEXOR Expr
   59     | Expr • BITWISEAND Expr
   60     | Expr • EQ Expr
   61     | Expr • NE Expr
   62     | Expr • LE Expr
   63     | Expr • GE Expr
   64     | Expr • LT Expr
   65     | Expr • GT Expr

    BITWISEAND  shift, and go to state 59
    BITWISEOR   shift, and go to state 60
    BITWISEXOR  shift, and go to state 61
    AND         shift, and go to state 62
    ASSIGN      shift, and go to state 63
    MUL         shift, and go to state 64
    DIV         shift, and go to state 66
    EQ          shift, and go to state 67
    GE          shift, and go to state 68
    GT          shift, and go to state 69
    LE          shift, and go to state 70
    LT          shift, and go to state 71
    MINUS       shift, and go to state 72
    MOD         shift, and go to state 73
    NE          shift, and go to state 74
    OR          shift, and go to state 75
    PLUS        shift, and go to state 76

    $default  reduce using rule 49 (Expr)

    Conflict between rule 49 and token BITWISEAND resolved as shift (COMMA < BITWISEAND).
    Conflict between rule 49 and token BITWISEOR resolved as shift (COMMA < BITWISEOR).
    Conflict between rule 49 and token BITWISEXOR resolved as shift (COMMA < BITWISEXOR).
    Conflict between rule 49 and token AND resolved as shift (COMMA < AND).
    Conflict between rule 49 and token ASSIGN resolved as shift (COMMA < ASSIGN).
    Conflict between rule 49 and token MUL resolved as shift (COMMA < MUL).
    Conflict between rule 49 and token COMMA resolved as reduce (%left COMMA).
    Conflict between rule 49 and token DIV resolved as shift (COMMA < DIV).
    Conflict between rule 49 and token EQ resolved as shift (COMMA < EQ).
    Conflict between rule 49 and token GE resolved as shift (COMMA < GE).
    Conflict between rule 49 and token GT resolved as shift (COMMA < GT).
    Conflict between rule 49 and token LE resolved as shift (COMMA < LE).
    Conflict between rule 49 and token LT resolved as shift (COMMA < LT).
    Conflict between rule 49 and token MINUS resolved as shift (COMMA < MINUS).
    Conflict between rule 49 and token MOD resolved as shift (COMMA < MOD).
    Conflict between rule 49 and token NE resolved as shift (COMMA < NE).
    Conflict between rule 49 and token OR resolved as shift (COMMA < OR).
    Conflict between rule 49 and token PLUS resolved as shift (COMMA < PLUS).


State 103

   48 Expr: Expr • ASSIGN Expr
   49     | Expr • COMMA Expr
   50     | Expr • PLUS Expr
   51     | Expr • MINUS Expr
   52     | Expr • MUL Expr
   53     | Expr • DIV Expr
   53     | Expr DIV Expr •  [BITWISEAND, BITWISEOR, BITWISEXOR, AND, ASSIGN, MUL, COMMA, DIV, EQ, GE, GT, LE, LT, MINUS, MOD, NE, OR, PLUS, RPAR, SEMI]
   54     | Expr • MOD Expr
   55     | Expr • OR Expr
   56     | Expr • AND Expr
   57     | Expr • BITWISEOR Expr
   58     | Expr • BITWISEXOR Expr
   59     | Expr • BITWISEAND Expr
   60     | Expr • EQ Expr
   61     | Expr • NE Expr
   62     | Expr • LE Expr
   63     | Expr • GE Expr
   64     | Expr • LT Expr
   65     | Expr • GT Expr

    $default  reduce using rule 53 (Expr)

    Conflict between rule 53 and token BITWISEAND resolved as reduce (BITWISEAND < DIV).
    Conflict between rule 53 and token BITWISEOR resolved as reduce (BITWISEOR < DIV).
    Conflict between rule 53 and token BITWISEXOR resolved as reduce (BITWISEXOR < DIV).
    Conflict between rule 53 and token AND resolved as reduce (AND < DIV).
    Conflict between rule 53 and token ASSIGN resolved as reduce (ASSIGN < DIV).
    Conflict between rule 53 and token MUL resolved as reduce (%left MUL).
    Conflict between rule 53 and token COMMA resolved as reduce (COMMA < DIV).
    Conflict between rule 53 and token DIV resolved as reduce (%left DIV).
    Conflict between rule 53 and token EQ resolved as reduce (EQ < DIV).
    Conflict between rule 53 and token GE resolved as reduce (GE < DIV).
    Conflict between rule 53 and token GT resolved as reduce (GT < DIV).
    Conflict between rule 53 and token LE resolved as reduce (LE < DIV).
    Conflict between rule 53 and token LT resolved as reduce (LT < DIV).
    Conflict between rule 53 and token MINUS resolved as reduce (MINUS < DIV).
    Conflict between rule 53 and token MOD resolved as reduce (%left MOD).
    Conflict between rule 53 and token NE resolved as reduce (NE < DIV).
    Conflict between rule 53 and token OR resolved as reduce (OR < DIV).
    Conflict between rule 53 and token PLUS resolved as reduce (PLUS < DIV).


State 104

   48 Expr: Expr • ASSIGN Expr
   49     | Expr • COMMA Expr
   50     | Expr • PLUS Expr
   51     | Expr • MINUS Expr
   52     | Expr • MUL Expr
   53     | Expr • DIV Expr
   54     | Expr • MOD Expr
   55     | Expr • OR Expr
   56     | Expr • AND Expr
   57     | Expr • BITWISEOR Expr
   58     | Expr • BITWISEXOR Expr
   59     | Expr • BITWISEAND Expr
   60     | Expr • EQ Expr
   60     | Expr EQ Expr •  [BITWISEAND, BITWISEOR, BITWISEXOR, AND, ASSIGN, COMMA, EQ, NE, OR, RPAR, SEMI]
   61     | Expr • NE Expr
   62     | Expr • LE Expr
   63     | Expr • GE Expr
   64     | Expr • LT Expr
   65     | Expr • GT Expr

    MUL    shift, and go to state 64
    DIV    shift, and go to state 66
    GE     shift, and go to state 68
    GT     shift, and go to state 69
    LE     shift, and go to state 70
    LT     shift, and go to state 71
    MINUS  shift, and go to state 72
    MOD    shift, and go to state 73
    PLUS   shift, and go to state 76

    $default  reduce using rule 60 (Expr)

    Conflict between rule 60 and token BITWISEAND resolved as reduce (BITWISEAND < EQ).
    Conflict between rule 60 and token BITWISEOR resolved as reduce (BITWISEOR < EQ).
    Conflict between rule 60 and token BITWISEXOR resolved as reduce (BITWISEXOR < EQ).
    Conflict between rule 60 and token AND resolved as reduce (AND < EQ).
    Conflict between rule 60 and token ASSIGN resolved as reduce (ASSIGN < EQ).
    Conflict between rule 60 and token MUL resolved as shift (EQ < MUL).
    Conflict between rule 60 and token COMMA resolved as reduce (COMMA < EQ).
    Conflict between rule 60 and token DIV resolved as shift (EQ < DIV).
    Conflict between rule 60 and token EQ resolved as reduce (%left EQ).
    Conflict between rule 60 and token GE resolved as shift (EQ < GE).
    Conflict between rule 60 and token GT resolved as shift (EQ < GT).
    Conflict between rule 60 and token LE resolved as shift (EQ < LE).
    Conflict between rule 60 and token LT resolved as shift (EQ < LT).
    Conflict between rule 60 and token MINUS resolved as shift (EQ < MINUS).
    Conflict between rule 60 and token MOD resolved as shift (EQ < MOD).
    Conflict between rule 60 and token NE resolved as reduce (%left NE).
    Conflict between rule 60 and token OR resolved as reduce (OR < EQ).
    Conflict between rule 60 and token PLUS resolved as shift (EQ < PLUS).


State 105

   48 Expr: Expr • ASSIGN Expr
   49     | Expr • COMMA Expr
   50     | Expr • PLUS Expr
   51     | Expr • MINUS Expr
   52     | Expr • MUL Expr
   53     | Expr • DIV Expr
   54     | Expr • MOD Expr
   55     | Expr • OR Expr
   56     | Expr • AND Expr
   57     | Expr • BITWISEOR Expr
   58     | Expr • BITWISEXOR Expr
   59     | Expr • BITWISEAND Expr
   60     | Expr • EQ Expr
   61     | Expr • NE Expr
   62     | Expr • LE Expr
   63     | Expr • GE Expr
   63     | Expr GE Expr •  [BITWISEAND, BITWISEOR, BITWISEXOR, AND, ASSIGN, COMMA, EQ, GE, GT, LE, LT, NE, OR, RPAR, SEMI]
   64     | Expr • LT Expr
   65     | Expr • GT Expr

    MUL    shift, and go to state 64
    DIV    shift, and go to state 66
    MINUS  shift, and go to state 72
    MOD    shift, and go to state 73
    PLUS   shift, and go to state 76

    $default  reduce using rule 63 (Expr)

    Conflict between rule 63 and token BITWISEAND resolved as reduce (BITWISEAND < GE).
    Conflict between rule 63 and token BITWISEOR resolved as reduce (BITWISEOR < GE).
    Conflict between rule 63 and token BITWISEXOR resolved as reduce (BITWISEXOR < GE).
    Conflict between rule 63 and token AND resolved as reduce (AND < GE).
    Conflict between rule 63 and token ASSIGN resolved as reduce (ASSIGN < GE).
    Conflict between rule 63 and token MUL resolved as shift (GE < MUL).
    Conflict between rule 63 and token COMMA resolved as reduce (COMMA < GE).
    Conflict between rule 63 and token DIV resolved as shift (GE < DIV).
    Conflict between rule 63 and token EQ resolved as reduce (EQ < GE).
    Conflict between rule 63 and token GE resolved as reduce (%left GE).
    Conflict between rule 63 and token GT resolved as reduce (%left GT).
    Conflict between rule 63 and token LE resolved as reduce (%left LE).
    Conflict between rule 63 and token LT resolved as reduce (%left LT).
    Conflict between rule 63 and token MINUS resolved as shift (GE < MINUS).
    Conflict between rule 63 and token MOD resolved as shift (GE < MOD).
    Conflict between rule 63 and token NE resolved as reduce (NE < GE).
    Conflict between rule 63 and token OR resolved as reduce (OR < GE).
    Conflict between rule 63 and token PLUS resolved as shift (GE < PLUS).


State 106

   48 Expr: Expr • ASSIGN Expr
   49     | Expr • COMMA Expr
   50     | Expr • PLUS Expr
   51     | Expr • MINUS Expr
   52     | Expr • MUL Expr
   53     | Expr • DIV Expr
   54     | Expr • MOD Expr
   55     | Expr • OR Expr
   56     | Expr • AND Expr
   57     | Expr • BITWISEOR Expr
   58     | Expr • BITWISEXOR Expr
   59     | Expr • BITWISEAND Expr
   60     | Expr • EQ Expr
   61     | Expr • NE Expr
   62     | Expr • LE Expr
   63     | Expr • GE Expr
   64     | Expr • LT Expr
   65     | Expr • GT Expr
   65     | Expr GT Expr •  [BITWISEAND, BITWISEOR, BITWISEXOR, AND, ASSIGN, COMMA, EQ, GE, GT, LE, LT, NE, OR, RPAR, SEMI]

    MUL    shift, and go to state 64
    DIV    shift, and go to state 66
    MINUS  shift, and go to state 72
    MOD    shift, and go to state 73
    PLUS   shift, and go to state 76

    $default  reduce using rule 65 (Expr)

    Conflict between rule 65 and token BITWISEAND resolved as reduce (BITWISEAND < GT).
    Conflict between rule 65 and token BITWISEOR resolved as reduce (BITWISEOR < GT).
    Conflict between rule 65 and token BITWISEXOR resolved as reduce (BITWISEXOR < GT).
    Conflict between rule 65 and token AND resolved as reduce (AND < GT).
    Conflict between rule 65 and token ASSIGN resolved as reduce (ASSIGN < GT).
    Conflict between rule 65 and token MUL resolved as shift (GT < MUL).
    Conflict between rule 65 and token COMMA resolved as reduce (COMMA < GT).
    Conflict between rule 65 and token DIV resolved as shift (GT < DIV).
    Conflict between rule 65 and token EQ resolved as reduce (EQ < GT).
    Conflict between rule 65 and token GE resolved as reduce (%left GE).
    Conflict between rule 65 and token GT resolved as reduce (%left GT).
    Conflict between rule 65 and token LE resolved as reduce (%left LE).
    Conflict between rule 65 and token LT resolved as reduce (%left LT).
    Conflict between rule 65 and token MINUS resolved as shift (GT < MINUS).
    Conflict between rule 65 and token MOD resolved as shift (GT < MOD).
    Conflict between rule 65 and token NE resolved as reduce (NE < GT).
    Conflict between rule 65 and token OR resolved as reduce (OR < GT).
    Conflict between rule 65 and token PLUS resolved as shift (GT < PLUS).


State 107

   48 Expr: Expr • ASSIGN Expr
   49     | Expr • COMMA Expr
   50     | Expr • PLUS Expr
   51     | Expr • MINUS Expr
   52     | Expr • MUL Expr
   53     | Expr • DIV Expr
   54     | Expr • MOD Expr
   55     | Expr • OR Expr
   56     | Expr • AND Expr
   57     | Expr • BITWISEOR Expr
   58     | Expr • BITWISEXOR Expr
   59     | Expr • BITWISEAND Expr
   60     | Expr • EQ Expr
   61     | Expr • NE Expr
   62     | Expr • LE Expr
   62     | Expr LE Expr •  [BITWISEAND, BITWISEOR, BITWISEXOR, AND, ASSIGN, COMMA, EQ, GE, GT, LE, LT, NE, OR, RPAR, SEMI]
   63     | Expr • GE Expr
   64     | Expr • LT Expr
   65     | Expr • GT Expr

    MUL    shift, and go to state 64
    DIV    shift, and go to state 66
    MINUS  shift, and go to state 72
    MOD    shift, and go to state 73
    PLUS   shift, and go to state 76

    $default  reduce using rule 62 (Expr)

    Conflict between rule 62 and token BITWISEAND resolved as reduce (BITWISEAND < LE).
    Conflict between rule 62 and token BITWISEOR resolved as reduce (BITWISEOR < LE).
    Conflict between rule 62 and token BITWISEXOR resolved as reduce (BITWISEXOR < LE).
    Conflict between rule 62 and token AND resolved as reduce (AND < LE).
    Conflict between rule 62 and token ASSIGN resolved as reduce (ASSIGN < LE).
    Conflict between rule 62 and token MUL resolved as shift (LE < MUL).
    Conflict between rule 62 and token COMMA resolved as reduce (COMMA < LE).
    Conflict between rule 62 and token DIV resolved as shift (LE < DIV).
    Conflict between rule 62 and token EQ resolved as reduce (EQ < LE).
    Conflict between rule 62 and token GE resolved as reduce (%left GE).
    Conflict between rule 62 and token GT resolved as reduce (%left GT).
    Conflict between rule 62 and token LE resolved as reduce (%left LE).
    Conflict between rule 62 and token LT resolved as reduce (%left LT).
    Conflict between rule 62 and token MINUS resolved as shift (LE < MINUS).
    Conflict between rule 62 and token MOD resolved as shift (LE < MOD).
    Conflict between rule 62 and token NE resolved as reduce (NE < LE).
    Conflict between rule 62 and token OR resolved as reduce (OR < LE).
    Conflict between rule 62 and token PLUS resolved as shift (LE < PLUS).


State 108

   48 Expr: Expr • ASSIGN Expr
   49     | Expr • COMMA Expr
   50     | Expr • PLUS Expr
   51     | Expr • MINUS Expr
   52     | Expr • MUL Expr
   53     | Expr • DIV Expr
   54     | Expr • MOD Expr
   55     | Expr • OR Expr
   56     | Expr • AND Expr
   57     | Expr • BITWISEOR Expr
   58     | Expr • BITWISEXOR Expr
   59     | Expr • BITWISEAND Expr
   60     | Expr • EQ Expr
   61     | Expr • NE Expr
   62     | Expr • LE Expr
   63     | Expr • GE Expr
   64     | Expr • LT Expr
   64     | Expr LT Expr •  [BITWISEAND, BITWISEOR, BITWISEXOR, AND, ASSIGN, COMMA, EQ, GE, GT, LE, LT, NE, OR, RPAR, SEMI]
   65     | Expr • GT Expr

    MUL    shift, and go to state 64
    DIV    shift, and go to state 66
    MINUS  shift, and go to state 72
    MOD    shift, and go to state 73
    PLUS   shift, and go to state 76

    $default  reduce using rule 64 (Expr)

    Conflict between rule 64 and token BITWISEAND resolved as reduce (BITWISEAND < LT).
    Conflict between rule 64 and token BITWISEOR resolved as reduce (BITWISEOR < LT).
    Conflict between rule 64 and token BITWISEXOR resolved as reduce (BITWISEXOR < LT).
    Conflict between rule 64 and token AND resolved as reduce (AND < LT).
    Conflict between rule 64 and token ASSIGN resolved as reduce (ASSIGN < LT).
    Conflict between rule 64 and token MUL resolved as shift (LT < MUL).
    Conflict between rule 64 and token COMMA resolved as reduce (COMMA < LT).
    Conflict between rule 64 and token DIV resolved as shift (LT < DIV).
    Conflict between rule 64 and token EQ resolved as reduce (EQ < LT).
    Conflict between rule 64 and token GE resolved as reduce (%left GE).
    Conflict between rule 64 and token GT resolved as reduce (%left GT).
    Conflict between rule 64 and token LE resolved as reduce (%left LE).
    Conflict between rule 64 and token LT resolved as reduce (%left LT).
    Conflict between rule 64 and token MINUS resolved as shift (LT < MINUS).
    Conflict between rule 64 and token MOD resolved as shift (LT < MOD).
    Conflict between rule 64 and token NE resolved as reduce (NE < LT).
    Conflict between rule 64 and token OR resolved as reduce (OR < LT).
    Conflict between rule 64 and token PLUS resolved as shift (LT < PLUS).


State 109

   48 Expr: Expr • ASSIGN Expr
   49     | Expr • COMMA Expr
   50     | Expr • PLUS Expr
   51     | Expr • MINUS Expr
   51     | Expr MINUS Expr •  [BITWISEAND, BITWISEOR, BITWISEXOR, AND, ASSIGN, COMMA, EQ, GE, GT, LE, LT, MINUS, NE, OR, PLUS, RPAR, SEMI]
   52     | Expr • MUL Expr
   53     | Expr • DIV Expr
   54     | Expr • MOD Expr
   55     | Expr • OR Expr
   56     | Expr • AND Expr
   57     | Expr • BITWISEOR Expr
   58     | Expr • BITWISEXOR Expr
   59     | Expr • BITWISEAND Expr
   60     | Expr • EQ Expr
   61     | Expr • NE Expr
   62     | Expr • LE Expr
   63     | Expr • GE Expr
   64     | Expr • LT Expr
   65     | Expr • GT Expr

    MUL  shift, and go to state 64
    DIV  shift, and go to state 66
    MOD  shift, and go to state 73

    $default  reduce using rule 51 (Expr)

    Conflict between rule 51 and token BITWISEAND resolved as reduce (BITWISEAND < MINUS).
    Conflict between rule 51 and token BITWISEOR resolved as reduce (BITWISEOR < MINUS).
    Conflict between rule 51 and token BITWISEXOR resolved as reduce (BITWISEXOR < MINUS).
    Conflict between rule 51 and token AND resolved as reduce (AND < MINUS).
    Conflict between rule 51 and token ASSIGN resolved as reduce (ASSIGN < MINUS).
    Conflict between rule 51 and token MUL resolved as shift (MINUS < MUL).
    Conflict between rule 51 and token COMMA resolved as reduce (COMMA < MINUS).
    Conflict between rule 51 and token DIV resolved as shift (MINUS < DIV).
    Conflict between rule 51 and token EQ resolved as reduce (EQ < MINUS).
    Conflict between rule 51 and token GE resolved as reduce (GE < MINUS).
    Conflict between rule 51 and token GT resolved as reduce (GT < MINUS).
    Conflict between rule 51 and token LE resolved as reduce (LE < MINUS).
    Conflict between rule 51 and token LT resolved as reduce (LT < MINUS).
    Conflict between rule 51 and token MINUS resolved as reduce (%left MINUS).
    Conflict between rule 51 and token MOD resolved as shift (MINUS < MOD).
    Conflict between rule 51 and token NE resolved as reduce (NE < MINUS).
    Conflict between rule 51 and token OR resolved as reduce (OR < MINUS).
    Conflict between rule 51 and token PLUS resolved as reduce (%left PLUS).


State 110

   48 Expr: Expr • ASSIGN Expr
   49     | Expr • COMMA Expr
   50     | Expr • PLUS Expr
   51     | Expr • MINUS Expr
   52     | Expr • MUL Expr
   53     | Expr • DIV Expr
   54     | Expr • MOD Expr
   54     | Expr MOD Expr •  [BITWISEAND, BITWISEOR, BITWISEXOR, AND, ASSIGN, MUL, COMMA, DIV, EQ, GE, GT, LE, LT, MINUS, MOD, NE, OR, PLUS, RPAR, SEMI]
   55     | Expr • OR Expr
   56     | Expr • AND Expr
   57     | Expr • BITWISEOR Expr
   58     | Expr • BITWISEXOR Expr
   59     | Expr • BITWISEAND Expr
   60     | Expr • EQ Expr
   61     | Expr • NE Expr
   62     | Expr • LE Expr
   63     | Expr • GE Expr
   64     | Expr • LT Expr
   65     | Expr • GT Expr

    $default  reduce using rule 54 (Expr)

    Conflict between rule 54 and token BITWISEAND resolved as reduce (BITWISEAND < MOD).
    Conflict between rule 54 and token BITWISEOR resolved as reduce (BITWISEOR < MOD).
    Conflict between rule 54 and token BITWISEXOR resolved as reduce (BITWISEXOR < MOD).
    Conflict between rule 54 and token AND resolved as reduce (AND < MOD).
    Conflict between rule 54 and token ASSIGN resolved as reduce (ASSIGN < MOD).
    Conflict between rule 54 and token MUL resolved as reduce (%left MUL).
    Conflict between rule 54 and token COMMA resolved as reduce (COMMA < MOD).
    Conflict between rule 54 and token DIV resolved as reduce (%left DIV).
    Conflict between rule 54 and token EQ resolved as reduce (EQ < MOD).
    Conflict between rule 54 and token GE resolved as reduce (GE < MOD).
    Conflict between rule 54 and token GT resolved as reduce (GT < MOD).
    Conflict between rule 54 and token LE resolved as reduce (LE < MOD).
    Conflict between rule 54 and token LT resolved as reduce (LT < MOD).
    Conflict between rule 54 and token MINUS resolved as reduce (MINUS < MOD).
    Conflict between rule 54 and token MOD resolved as reduce (%left MOD).
    Conflict between rule 54 and token NE resolved as reduce (NE < MOD).
    Conflict between rule 54 and token OR resolved as reduce (OR < MOD).
    Conflict between rule 54 and token PLUS resolved as reduce (PLUS < MOD).


State 111

   48 Expr: Expr • ASSIGN Expr
   49     | Expr • COMMA Expr
   50     | Expr • PLUS Expr
   51     | Expr • MINUS Expr
   52     | Expr • MUL Expr
   53     | Expr • DIV Expr
   54     | Expr • MOD Expr
   55     | Expr • OR Expr
   56     | Expr • AND Expr
   57     | Expr • BITWISEOR Expr
   58     | Expr • BITWISEXOR Expr
   59     | Expr • BITWISEAND Expr
   60     | Expr • EQ Expr
   61     | Expr • NE Expr
   61     | Expr NE Expr •  [BITWISEAND, BITWISEOR, BITWISEXOR, AND, ASSIGN, COMMA, EQ, NE, OR, RPAR, SEMI]
   62     | Expr • LE Expr
   63     | Expr • GE Expr
   64     | Expr • LT Expr
   65     | Expr • GT Expr

    MUL    shift, and go to state 64
    DIV    shift, and go to state 66
    GE     shift, and go to state 68
    GT     shift, and go to state 69
    LE     shift, and go to state 70
    LT     shift, and go to state 71
    MINUS  shift, and go to state 72
    MOD    shift, and go to state 73
    PLUS   shift, and go to state 76

    $default  reduce using rule 61 (Expr)

    Conflict between rule 61 and token BITWISEAND resolved as reduce (BITWISEAND < NE).
    Conflict between rule 61 and token BITWISEOR resolved as reduce (BITWISEOR < NE).
    Conflict between rule 61 and token BITWISEXOR resolved as reduce (BITWISEXOR < NE).
    Conflict between rule 61 and token AND resolved as reduce (AND < NE).
    Conflict between rule 61 and token ASSIGN resolved as reduce (ASSIGN < NE).
    Conflict between rule 61 and token MUL resolved as shift (NE < MUL).
    Conflict between rule 61 and token COMMA resolved as reduce (COMMA < NE).
    Conflict between rule 61 and token DIV resolved as shift (NE < DIV).
    Conflict between rule 61 and token EQ resolved as reduce (%left EQ).
    Conflict between rule 61 and token GE resolved as shift (NE < GE).
    Conflict between rule 61 and token GT resolved as shift (NE < GT).
    Conflict between rule 61 and token LE resolved as shift (NE < LE).
    Conflict between rule 61 and token LT resolved as shift (NE < LT).
    Conflict between rule 61 and token MINUS resolved as shift (NE < MINUS).
    Conflict between rule 61 and token MOD resolved as shift (NE < MOD).
    Conflict between rule 61 and token NE resolved as reduce (%left NE).
    Conflict between rule 61 and token OR resolved as reduce (OR < NE).
    Conflict between rule 61 and token PLUS resolved as shift (NE < PLUS).


State 112

   48 Expr: Expr • ASSIGN Expr
   49     | Expr • COMMA Expr
   50     | Expr • PLUS Expr
   51     | Expr • MINUS Expr
   52     | Expr • MUL Expr
   53     | Expr • DIV Expr
   54     | Expr • MOD Expr
   55     | Expr • OR Expr
   55     | Expr OR Expr •  [ASSIGN, COMMA, OR, RPAR, SEMI]
   56     | Expr • AND Expr
   57     | Expr • BITWISEOR Expr
   58     | Expr • BITWISEXOR Expr
   59     | Expr • BITWISEAND Expr
   60     | Expr • EQ Expr
   61     | Expr • NE Expr
   62     | Expr • LE Expr
   63     | Expr • GE Expr
   64     | Expr • LT Expr
   65     | Expr • GT Expr

    BITWISEAND  shift, and go to state 59
    BITWISEOR   shift, and go to state 60
    BITWISEXOR  shift, and go to state 61
    AND         shift, and go to state 62
    MUL         shift, and go to state 64
    DIV         shift, and go to state 66
    EQ          shift, and go to state 67
    GE          shift, and go to state 68
    GT          shift, and go to state 69
    LE          shift, and go to state 70
    LT          shift, and go to state 71
    MINUS       shift, and go to state 72
    MOD         shift, and go to state 73
    NE          shift, and go to state 74
    PLUS        shift, and go to state 76

    $default  reduce using rule 55 (Expr)

    Conflict between rule 55 and token BITWISEAND resolved as shift (OR < BITWISEAND).
    Conflict between rule 55 and token BITWISEOR resolved as shift (OR < BITWISEOR).
    Conflict between rule 55 and token BITWISEXOR resolved as shift (OR < BITWISEXOR).
    Conflict between rule 55 and token AND resolved as shift (OR < AND).
    Conflict between rule 55 and token ASSIGN resolved as reduce (ASSIGN < OR).
    Conflict between rule 55 and token MUL resolved as shift (OR < MUL).
    Conflict between rule 55 and token COMMA resolved as reduce (COMMA < OR).
    Conflict between rule 55 and token DIV resolved as shift (OR < DIV).
    Conflict between rule 55 and token EQ resolved as shift (OR < EQ).
    Conflict between rule 55 and token GE resolved as shift (OR < GE).
    Conflict between rule 55 and token GT resolved as shift (OR < GT).
    Conflict between rule 55 and token LE resolved as shift (OR < LE).
    Conflict between rule 55 and token LT resolved as shift (OR < LT).
    Conflict between rule 55 and token MINUS resolved as shift (OR < MINUS).
    Conflict between rule 55 and token MOD resolved as shift (OR < MOD).
    Conflict between rule 55 and token NE resolved as shift (OR < NE).
    Conflict between rule 55 and token OR resolved as reduce (%left OR).
    Conflict between rule 55 and token PLUS resolved as shift (OR < PLUS).


State 113

   48 Expr: Expr • ASSIGN Expr
   49     | Expr • COMMA Expr
   50     | Expr • PLUS Expr
   50     | Expr PLUS Expr •  [BITWISEAND, BITWISEOR, BITWISEXOR, AND, ASSIGN, COMMA, EQ, GE, GT, LE, LT, MINUS, NE, OR, PLUS, RPAR, SEMI]
   51     | Expr • MINUS Expr
   52     | Expr • MUL Expr
   53     | Expr • DIV Expr
   54     | Expr • MOD Expr
   55     | Expr • OR Expr
   56     | Expr • AND Expr
   57     | Expr • BITWISEOR Expr
   58     | Expr • BITWISEXOR Expr
   59     | Expr • BITWISEAND Expr
   60     | Expr • EQ Expr
   61     | Expr • NE Expr
   62     | Expr • LE Expr
   63     | Expr • GE Expr
   64     | Expr • LT Expr
   65     | Expr • GT Expr

    MUL  shift, and go to state 64
    DIV  shift, and go to state 66
    MOD  shift, and go to state 73

    $default  reduce using rule 50 (Expr)

    Conflict between rule 50 and token BITWISEAND resolved as reduce (BITWISEAND < PLUS).
    Conflict between rule 50 and token BITWISEOR resolved as reduce (BITWISEOR < PLUS).
    Conflict between rule 50 and token BITWISEXOR resolved as reduce (BITWISEXOR < PLUS).
    Conflict between rule 50 and token AND resolved as reduce (AND < PLUS).
    Conflict between rule 50 and token ASSIGN resolved as reduce (ASSIGN < PLUS).
    Conflict between rule 50 and token MUL resolved as shift (PLUS < MUL).
    Conflict between rule 50 and token COMMA resolved as reduce (COMMA < PLUS).
    Conflict between rule 50 and token DIV resolved as shift (PLUS < DIV).
    Conflict between rule 50 and token EQ resolved as reduce (EQ < PLUS).
    Conflict between rule 50 and token GE resolved as reduce (GE < PLUS).
    Conflict between rule 50 and token GT resolved as reduce (GT < PLUS).
    Conflict between rule 50 and token LE resolved as reduce (LE < PLUS).
    Conflict between rule 50 and token LT resolved as reduce (LT < PLUS).
    Conflict between rule 50 and token MINUS resolved as reduce (%left MINUS).
    Conflict between rule 50 and token MOD resolved as shift (PLUS < MOD).
    Conflict between rule 50 and token NE resolved as reduce (NE < PLUS).
    Conflict between rule 50 and token OR resolved as reduce (OR < PLUS).
    Conflict between rule 50 and token PLUS resolved as reduce (%left PLUS).


State 114

   18 ParameterList: ParameterDeclaration COMMA ParameterList •

    $default  reduce using rule 18 (ParameterList)


State 115

   38 Statement: WHILE LPAR Expr • RPAR Statement
   48 Expr: Expr • ASSIGN Expr
   49     | Expr • COMMA Expr
   50     | Expr • PLUS Expr
   51     | Expr • MINUS Expr
   52     | Expr • MUL Expr
   53     | Expr • DIV Expr
   54     | Expr • MOD Expr
   55     | Expr • OR Expr
   56     | Expr • AND Expr
   57     | Expr • BITWISEOR Expr
   58     | Expr • BITWISEXOR Expr
   59     | Expr • BITWISEAND Expr
   60     | Expr • EQ Expr
   61     | Expr • NE Expr
   62     | Expr • LE Expr
   63     | Expr • GE Expr
   64     | Expr • LT Expr
   65     | Expr • GT Expr

    BITWISEAND  shift, and go to state 59
    BITWISEOR   shift, and go to state 60
    BITWISEXOR  shift, and go to state 61
    AND         shift, and go to state 62
    ASSIGN      shift, and go to state 63
    MUL         shift, and go to state 64
    COMMA       shift, and go to state 65
    DIV         shift, and go to state 66
    EQ          shift, and go to state 67
    GE          shift, and go to state 68
    GT          shift, and go to state 69
    LE          shift, and go to state 70
    LT          shift, and go to state 71
    MINUS       shift, and go to state 72
    MOD         shift, and go to state 73
    NE          shift, and go to state 74
    OR          shift, and go to state 75
    PLUS        shift, and go to state 76
    RPAR        shift, and go to state 123


State 116

   36 Statement: IF LPAR Expr • RPAR Statement
   37          | IF LPAR Expr • RPAR Statement ELSE Statement
   48 Expr: Expr • ASSIGN Expr
   49     | Expr • COMMA Expr
   50     | Expr • PLUS Expr
   51     | Expr • MINUS Expr
   52     | Expr • MUL Expr
   53     | Expr • DIV Expr
   54     | Expr • MOD Expr
   55     | Expr • OR Expr
   56     | Expr • AND Expr
   57     | Expr • BITWISEOR Expr
   58     | Expr • BITWISEXOR Expr
   59     | Expr • BITWISEAND Expr
   60     | Expr • EQ Expr
   61     | Expr • NE Expr
   62     | Expr • LE Expr
   63     | Expr • GE Expr
   64     | Expr • LT Expr
   65     | Expr • GT Expr

    BITWISEAND  shift, and go to state 59
    BITWISEOR   shift, and go to state 60
    BITWISEXOR  shift, and go to state 61
    AND         shift, and go to state 62
    ASSIGN      shift, and go to state 63
    MUL         shift, and go to state 64
    COMMA       shift, and go to state 65
    DIV         shift, and go to state 66
    EQ          shift, and go to state 67
    GE          shift, and go to state 68
    GT          shift, and go to state 69
    LE          shift, and go to state 70
    LT          shift, and go to state 71
    MINUS       shift, and go to state 72
    MOD         shift, and go to state 73
    NE          shift, and go to state 74
    OR          shift, and go to state 75
    PLUS        shift, and go to state 76
    RPAR        shift, and go to state 124


State 117

   40 Statement: RETURN Expr SEMI •

    $default  reduce using rule 40 (Statement)


State 118

   35 Statement: LBRACE Statements RBRACE •

    $default  reduce using rule 35 (Statement)


State 119

   42 Statements: Statements Statement •

    $default  reduce using rule 42 (Statements)


State 120

   48 Expr: Expr • ASSIGN Expr
   49     | Expr • COMMA Expr
   50     | Expr • PLUS Expr
   51     | Expr • MINUS Expr
   52     | Expr • MUL Expr
   53     | Expr • DIV Expr
   54     | Expr • MOD Expr
   55     | Expr • OR Expr
   56     | Expr • AND Expr
   57     | Expr • BITWISEOR Expr
   58     | Expr • BITWISEXOR Expr
   59     | Expr • BITWISEAND Expr
   60     | Expr • EQ Expr
   61     | Expr • NE Expr
   62     | Expr • LE Expr
   63     | Expr • GE Expr
   64     | Expr • LT Expr
   65     | Expr • GT Expr
   71 ExprList: COMMA Expr •  [COMMA, RPAR]

    BITWISEAND  shift, and go to state 59
    BITWISEOR   shift, and go to state 60
    BITWISEXOR  shift, and go to state 61
    AND         shift, and go to state 62
    ASSIGN      shift, and go to state 63
    MUL         shift, and go to state 64
    DIV         shift, and go to state 66
    EQ          shift, and go to state 67
    GE          shift, and go to state 68
    GT          shift, and go to state 69
    LE          shift, and go to state 70
    LT          shift, and go to state 71
    MINUS       shift, and go to state 72
    MOD         shift, and go to state 73
    NE          shift, and go to state 74
    OR          shift, and go to state 75
    PLUS        shift, and go to state 76

    $default  reduce using rule 71 (ExprList)

    Conflict between rule 71 and token COMMA resolved as reduce (%left COMMA).


State 121

   43 Expr: • IDENTIFIER
   44     | • NATURAL
   45     | • CHRLIT
   46     | • DECIMAL
   47     | • LPAR Expr RPAR
   48     | • Expr ASSIGN Expr
   49     | • Expr COMMA Expr
   50     | • Expr PLUS Expr
   51     | • Expr MINUS Expr
   52     | • Expr MUL Expr
   53     | • Expr DIV Expr
   54     | • Expr MOD Expr
   55     | • Expr OR Expr
   56     | • Expr AND Expr
   57     | • Expr BITWISEOR Expr
   58     | • Expr BITWISEXOR Expr
   59     | • Expr BITWISEAND Expr
   60     | • Expr EQ Expr
   61     | • Expr NE Expr
   62     | • Expr LE Expr
   63     | • Expr GE Expr
   64     | • Expr LT Expr
   65     | • Expr GT Expr
   66     | • MINUS Expr
   67     | • PLUS Expr
   68     | • NOT Expr
   69     | • IDENTIFIER LPAR RPAR
   70     | • IDENTIFIER LPAR ExprList RPAR
   72 ExprList: ExprList COMMA • Expr

    LPAR        shift, and go to state 27
    MINUS       shift, and go to state 28
    NOT         shift, and go to state 29
    PLUS        shift, and go to state 30
    IDENTIFIER  shift, and go to state 31
    NATURAL     shift, and go to state 32
    DECIMAL     shift, and go to state 33
    CHRLIT      shift, and go to state 34

    Expr  go to state 125


State 122

   70 Expr: IDENTIFIER LPAR ExprList RPAR •

    $default  reduce using rule 70 (Expr)


State 123

   32 Statement: • SEMI
   33          | • Expr SEMI
   34          | • LBRACE RBRACE
   35          | • LBRACE Statements RBRACE
   36          | • IF LPAR Expr RPAR Statement
   37          | • IF LPAR Expr RPAR Statement ELSE Statement
   38          | • WHILE LPAR Expr RPAR Statement
   38          | WHILE LPAR Expr RPAR • Statement
   39          | • RETURN SEMI
   40          | • RETURN Expr SEMI
   43 Expr: • IDENTIFIER
   44     | • NATURAL
   45     | • CHRLIT
   46     | • DECIMAL
   47     | • LPAR Expr RPAR
   48     | • Expr ASSIGN Expr
   49     | • Expr COMMA Expr
   50     | • Expr PLUS Expr
   51     | • Expr MINUS Expr
   52     | • Expr MUL Expr
   53     | • Expr DIV Expr
   54     | • Expr MOD Expr
   55     | • Expr OR Expr
   56     | • Expr AND Expr
   57     | • Expr BITWISEOR Expr
   58     | • Expr BITWISEXOR Expr
   59     | • Expr BITWISEAND Expr
   60     | • Expr EQ Expr
   61     | • Expr NE Expr
   62     | • Expr LE Expr
   63     | • Expr GE Expr
   64     | • Expr LT Expr
   65     | • Expr GT Expr
   66     | • MINUS Expr
   67     | • PLUS Expr
   68     | • NOT Expr
   69     | • IDENTIFIER LPAR RPAR
   70     | • IDENTIFIER LPAR ExprList RPAR

    WHILE       shift, and go to state 39
    IF          shift, and go to state 40
    RETURN      shift, and go to state 41
    LBRACE      shift, and go to state 42
    LPAR        shift, and go to state 27
    MINUS       shift, and go to state 28
    NOT         shift, and go to state 29
    PLUS        shift, and go to state 30
    SEMI        shift, and go to state 44
    IDENTIFIER  shift, and go to state 31
    NATURAL     shift, and go to state 32
    DECIMAL     shift, and go to state 33
    CHRLIT      shift, and go to state 34

    Statement  go to state 126
    Expr       go to state 49


State 124

   32 Statement: • SEMI
   33          | • Expr SEMI
   34          | • LBRACE RBRACE
   35          | • LBRACE Statements RBRACE
   36          | • IF LPAR Expr RPAR Statement
   36          | IF LPAR Expr RPAR • Statement
   37          | • IF LPAR Expr RPAR Statement ELSE Statement
   37          | IF LPAR Expr RPAR • Statement ELSE Statement
   38          | • WHILE LPAR Expr RPAR Statement
   39          | • RETURN SEMI
   40          | • RETURN Expr SEMI
   43 Expr: • IDENTIFIER
   44     | • NATURAL
   45     | • CHRLIT
   46     | • DECIMAL
   47     | • LPAR Expr RPAR
   48     | • Expr ASSIGN Expr
   49     | • Expr COMMA Expr
   50     | • Expr PLUS Expr
   51     | • Expr MINUS Expr
   52     | • Expr MUL Expr
   53     | • Expr DIV Expr
   54     | • Expr MOD Expr
   55     | • Expr OR Expr
   56     | • Expr AND Expr
   57     | • Expr BITWISEOR Expr
   58     | • Expr BITWISEXOR Expr
   59     | • Expr BITWISEAND Expr
   60     | • Expr EQ Expr
   61     | • Expr NE Expr
   62     | • Expr LE Expr
   63     | • Expr GE Expr
   64     | • Expr LT Expr
   65     | • Expr GT Expr
   66     | • MINUS Expr
   67     | • PLUS Expr
   68     | • NOT Expr
   69     | • IDENTIFIER LPAR RPAR
   70     | • IDENTIFIER LPAR ExprList RPAR

    WHILE       shift, and go to state 39
    IF          shift, and go to state 40
    RETURN      shift, and go to state 41
    LBRACE      shift, and go to state 42
    LPAR        shift, and go to state 27
    MINUS       shift, and go to state 28
    NOT         shift, and go to state 29
    PLUS        shift, and go to state 30
    SEMI        shift, and go to state 44
    IDENTIFIER  shift, and go to state 31
    NATURAL     shift, and go to state 32
    DECIMAL     shift, and go to state 33
    CHRLIT      shift, and go to state 34

    Statement  go to state 127
    Expr       go to state 49


State 125

   48 Expr: Expr • ASSIGN Expr
   49     | Expr • COMMA Expr
   50     | Expr • PLUS Expr
   51     | Expr • MINUS Expr
   52     | Expr • MUL Expr
   53     | Expr • DIV Expr
   54     | Expr • MOD Expr
   55     | Expr • OR Expr
   56     | Expr • AND Expr
   57     | Expr • BITWISEOR Expr
   58     | Expr • BITWISEXOR Expr
   59     | Expr • BITWISEAND Expr
   60     | Expr • EQ Expr
   61     | Expr • NE Expr
   62     | Expr • LE Expr
   63     | Expr • GE Expr
   64     | Expr • LT Expr
   65     | Expr • GT Expr
   72 ExprList: ExprList COMMA Expr •  [COMMA, RPAR]

    BITWISEAND  shift, and go to state 59
    BITWISEOR   shift, and go to state 60
    BITWISEXOR  shift, and go to state 61
    AND         shift, and go to state 62
    ASSIGN      shift, and go to state 63
    MUL         shift, and go to state 64
    DIV         shift, and go to state 66
    EQ          shift, and go to state 67
    GE          shift, and go to state 68
    GT          shift, and go to state 69
    LE          shift, and go to state 70
    LT          shift, and go to state 71
    MINUS       shift, and go to state 72
    MOD         shift, and go to state 73
    NE          shift, and go to state 74
    OR          shift, and go to state 75
    PLUS        shift, and go to state 76

    $default  reduce using rule 72 (ExprList)

    Conflict between rule 72 and token COMMA resolved as reduce (%left COMMA).


State 126

   38 Statement: WHILE LPAR Expr RPAR Statement •

    $default  reduce using rule 38 (Statement)


State 127

   36 Statement: IF LPAR Expr RPAR Statement •  [CHAR, DOUBLE, INT, SHORT, WHILE, IF, RETURN, VOID, LBRACE, LPAR, MINUS, NOT, PLUS, RBRACE, SEMI, IDENTIFIER, NATURAL, DECIMAL, CHRLIT]
   37          | IF LPAR Expr RPAR Statement • ELSE Statement

    ELSE  shift, and go to state 128

    $default  reduce using rule 36 (Statement)

    Conflict between rule 36 and token ELSE resolved as shift (RPAR < ELSE).


State 128

   32 Statement: • SEMI
   33          | • Expr SEMI
   34          | • LBRACE RBRACE
   35          | • LBRACE Statements RBRACE
   36          | • IF LPAR Expr RPAR Statement
   37          | • IF LPAR Expr RPAR Statement ELSE Statement
   37          | IF LPAR Expr RPAR Statement ELSE • Statement
   38          | • WHILE LPAR Expr RPAR Statement
   39          | • RETURN SEMI
   40          | • RETURN Expr SEMI
   43 Expr: • IDENTIFIER
   44     | • NATURAL
   45     | • CHRLIT
   46     | • DECIMAL
   47     | • LPAR Expr RPAR
   48     | • Expr ASSIGN Expr
   49     | • Expr COMMA Expr
   50     | • Expr PLUS Expr
   51     | • Expr MINUS Expr
   52     | • Expr MUL Expr
   53     | • Expr DIV Expr
   54     | • Expr MOD Expr
   55     | • Expr OR Expr
   56     | • Expr AND Expr
   57     | • Expr BITWISEOR Expr
   58     | • Expr BITWISEXOR Expr
   59     | • Expr BITWISEAND Expr
   60     | • Expr EQ Expr
   61     | • Expr NE Expr
   62     | • Expr LE Expr
   63     | • Expr GE Expr
   64     | • Expr LT Expr
   65     | • Expr GT Expr
   66     | • MINUS Expr
   67     | • PLUS Expr
   68     | • NOT Expr
   69     | • IDENTIFIER LPAR RPAR
   70     | • IDENTIFIER LPAR ExprList RPAR

    WHILE       shift, and go to state 39
    IF          shift, and go to state 40
    RETURN      shift, and go to state 41
    LBRACE      shift, and go to state 42
    LPAR        shift, and go to state 27
    MINUS       shift, and go to state 28
    NOT         shift, and go to state 29
    PLUS        shift, and go to state 30
    SEMI        shift, and go to state 44
    IDENTIFIER  shift, and go to state 31
    NATURAL     shift, and go to state 32
    DECIMAL     shift, and go to state 33
    CHRLIT      shift, and go to state 34

    Statement  go to state 129
    Expr       go to state 49


State 129

   37 Statement: IF LPAR Expr RPAR Statement ELSE Statement •

    $default  reduce using rule 37 (Statement)
